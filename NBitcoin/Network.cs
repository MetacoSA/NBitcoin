#nullable enable
using System;
using System.Reflection;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading;
using NBitcoin.DataEncoders;
using NBitcoin.Protocol;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Buffers;

namespace NBitcoin
{
	public class DNSSeedData
	{
		string name, host;
		public string Name
		{
			get
			{
				return name;
			}
		}
		public string Host
		{
			get
			{
				return host;
			}
		}
		public DNSSeedData(string name, string host)
		{
			this.name = name;
			this.host = host;
		}
#if !NOSOCKET
		public Task<IPEndPoint[]> GetAddressNodesAsync(int port)
		{
			return GetAddressNodesAsync(port, null, default);
		}
		public Task<IPEndPoint[]> GetAddressNodesAsync(int port, IDnsResolver? dnsResolver, CancellationToken cancellationToken = default)
		{
			var dns = new DnsEndPoint(Host, port);
			return dns.ResolveToIPEndpointsAsync(dnsResolver, cancellationToken);
		}
#endif
		public override string ToString()
		{
			return name + " (" + host + ")";
		}
	}
	public class ChainName
	{
		static ChainName()
		{
			Mainnet = new ChainName("Mainnet");
			Testnet = new ChainName("Testnet");
			Regtest = new ChainName("Regtest");
		}
		public static ChainName Mainnet { get; }
		public static ChainName Testnet { get; }
		public static ChainName Regtest { get; }

		private readonly string nameInvariant;

		public ChainName(string chainName)
		{
			if (chainName == null)
				throw new ArgumentNullException(nameof(chainName));
			if (chainName.Length is 0)
				throw new ArgumentException("Empty chainName is invalid", nameof(chainName));

#if !HAS_SPAN
			var invariant = chainName.ToLowerInvariant().ToCharArray();
			invariant[0] = char.ToUpperInvariant(invariant[0]);
			this.nameInvariant = new string(invariant);
#else
			this.nameInvariant = String.Create<string>(chainName.Length, chainName, CreateInvariant);
#endif
		}
#if HAS_SPAN
		static void CreateInvariant(Span<char> span, string arg)
		{
			MemoryExtensions.ToLowerInvariant(arg.AsSpan(), span);
			span[0] = char.ToUpperInvariant(span[0]);
		}
#endif

		public override bool Equals(object obj)
		{
			ChainName? item = obj as ChainName;
			if (item is null)
				return false;
			return nameInvariant.Equals(item.nameInvariant);
		}
		public static bool operator ==(ChainName a, ChainName b)
		{
			if (a is ChainName && b is ChainName)
				return a.nameInvariant == b.nameInvariant;
			if (a is null && b is null)
				return true;
			return false;
		}

		public static bool operator !=(ChainName a, ChainName b)
		{
			return !(a == b);
		}

		public override int GetHashCode()
		{
			return nameInvariant.GetHashCode();
		}
		public override string ToString()
		{
			return nameInvariant;
		}
	}

	public enum Base58Type
	{
		PUBKEY_ADDRESS,
		SCRIPT_ADDRESS,
		SECRET_KEY,
		EXT_PUBLIC_KEY,
		EXT_SECRET_KEY,
		ENCRYPTED_SECRET_KEY_EC,
		ENCRYPTED_SECRET_KEY_NO_EC,
		PASSPHRASE_CODE,
		CONFIRMATION_CODE,
		ASSET_ID,
		COLORED_ADDRESS,
		BLINDED_ADDRESS,
		MAX_BASE58_TYPES,
	};

	public enum Bech32Type
	{
		WITNESS_PUBKEY_ADDRESS,
		WITNESS_SCRIPT_ADDRESS,
		TAPROOT_ADDRESS,
		BLINDED_ADDRESS
	}

	public partial class Network
	{
		internal byte[][] base58Prefixes = new byte[13][];
		internal Bech32Encoder[] bech32Encoders = new Bech32Encoder[3];

		public String UriScheme { get; internal set; }
		public uint MaxP2PVersion
		{
			get;
			internal set;
		}

		public Bech32Encoder? GetBech32Encoder(Bech32Type type, bool throws)
		{
			var encoder = bech32Encoders[(int)type];
			if (encoder == null && throws)
				throw Bech32NotSupported(type);
			return encoder;
		}

		internal NotSupportedException Bech32NotSupported(Bech32Type type)
		{
			return new NotSupportedException("The network " + this + " does not have any prefix for bech32 " + Enum.GetName(typeof(Bech32Type), type));
		}

		public byte[]? GetVersionBytes(Base58Type type, bool throws)
		{
			var prefix = base58Prefixes[(int)type];
			if (prefix == null && throws)
				throw Base58NotSupported(type);
			return prefix?.ToArray();
		}
#if HAS_SPAN
		public ReadOnlyMemory<byte>? GetVersionMemory(Base58Type type, bool throws)
		{
			var prefix = base58Prefixes[(int)type];
			if (prefix == null && throws)
				throw Base58NotSupported(type);
			return prefix?.AsMemory();
		}
#endif

		internal NotSupportedException Base58NotSupported(Base58Type type)
		{
			return new NotSupportedException("The network " + this + " does not have any prefix for base58 " + Enum.GetName(typeof(Base58Type), type));
		}

		internal static string CreateBase58(Base58Type type, byte[] bytes, Network network)
		{
			if (network == null)
				throw new ArgumentNullException(nameof(network));
			if (bytes == null)
				throw new ArgumentNullException(nameof(bytes));
			var versionBytes = network.GetVersionBytes(type, true);
			return network.NetworkStringParser.GetBase58CheckEncoder().EncodeData(versionBytes.Concat(bytes));
		}

		internal static string CreateBech32(Bech32Type type, byte[] bytes, byte witnessVersion, Network network)
		{
			if (network == null)
				throw new ArgumentNullException(nameof(network));
			if (bytes == null)
				throw new ArgumentNullException(nameof(bytes));
			if (network.GetBech32Encoder(type, false) is Bech32Encoder encoder)
				return encoder.Encode(witnessVersion, bytes);
			throw network.Bech32NotSupported(type);
		}

		public Transaction CreateTransaction()
		{
			return Consensus.ConsensusFactory.CreateTransaction();
		}
	}

	public enum BuriedDeployments : int
	{
		/// <summary>
		/// Height in coinbase
		/// </summary>
		BIP34,
		/// <summary>
		/// Height in OP_CLTV
		/// </summary>
		BIP65,
		/// <summary>
		/// Strict DER signature
		/// </summary>
		BIP66
	}

	public class Consensus
	{
		public static Consensus Main
		{
			get
			{
				return Network.Main.Consensus;
			}
		}
		public static Consensus TestNet
		{
			get
			{
				return Network.TestNet.Consensus;
			}
		}
		public static Consensus RegTest
		{
			get
			{
				return Network.RegTest.Consensus;
			}
		}
		public class BuriedDeploymentsArray
		{
			Consensus _Parent;
			int[] _Heights;
			public BuriedDeploymentsArray(Consensus parent)
			{
				_Parent = parent;
				_Heights = new int[Enum.GetValues(typeof(BuriedDeployments)).Length];
			}
			public int this[BuriedDeployments index]
			{
				get
				{
					return _Heights[(int)index];
				}
				set
				{
					_Parent.EnsureNotFrozen();
					_Heights[(int)index] = value;
				}
			}
		}
		public class BIP9DeploymentsArray
		{
			Consensus _Parent;
			BIP9DeploymentsParameters[] _Parameters;
			public BIP9DeploymentsArray(Consensus parent)
			{
				_Parent = parent;
				_Parameters = new BIP9DeploymentsParameters[Enum.GetValues(typeof(BIP9Deployments)).Length];
			}

			public BIP9DeploymentsParameters this[BIP9Deployments index]
			{
				get
				{
					return _Parameters[(int)index];
				}
				set
				{
					_Parent.EnsureNotFrozen();
					_Parameters[(int)index] = value;
				}
			}
		}

		public Consensus()
		{
			_BuriedDeployments = new BuriedDeploymentsArray(this);
			_BIP9Deployments = new BIP9DeploymentsArray(this);
		}
		private readonly BuriedDeploymentsArray _BuriedDeployments;
		public BuriedDeploymentsArray BuriedDeployments
		{
			get
			{
				return _BuriedDeployments;
			}
		}


		private readonly BIP9DeploymentsArray _BIP9Deployments;
		public BIP9DeploymentsArray BIP9Deployments
		{
			get
			{
				return _BIP9Deployments;
			}
		}

		int _SubsidyHalvingInterval;
		public int SubsidyHalvingInterval
		{
			get
			{
				return _SubsidyHalvingInterval;
			}
			set
			{
				EnsureNotFrozen();
				_SubsidyHalvingInterval = value;
			}
		}

		private ConsensusFactory _ConsensusFactory = new ConsensusFactory();
		public ConsensusFactory ConsensusFactory
		{
			get
			{
				return _ConsensusFactory;
			}
			set
			{
				EnsureNotFrozen();
				_ConsensusFactory = value;
			}
		}


		int _MajorityEnforceBlockUpgrade;

		public int MajorityEnforceBlockUpgrade
		{
			get
			{
				return _MajorityEnforceBlockUpgrade;
			}
			set
			{
				EnsureNotFrozen();
				_MajorityEnforceBlockUpgrade = value;
			}
		}

		int _MajorityRejectBlockOutdated;
		public int MajorityRejectBlockOutdated
		{
			get
			{
				return _MajorityRejectBlockOutdated;
			}
			set
			{
				EnsureNotFrozen();
				_MajorityRejectBlockOutdated = value;
			}
		}

		int _MajorityWindow;
		public int MajorityWindow
		{
			get
			{
				return _MajorityWindow;
			}
			set
			{
				EnsureNotFrozen();
				_MajorityWindow = value;
			}
		}

		uint256? _BIP34Hash;
		public uint256? BIP34Hash
		{
			get
			{
				return _BIP34Hash;
			}
			set
			{
				EnsureNotFrozen();
				_BIP34Hash = value;
			}
		}


		Target? _PowLimit;
		public Target? PowLimit
		{
			get
			{
				return _PowLimit;
			}
			set
			{
				EnsureNotFrozen();
				_PowLimit = value;
			}
		}


		TimeSpan _PowTargetTimespan;
		public TimeSpan PowTargetTimespan
		{
			get
			{
				return _PowTargetTimespan;
			}
			set
			{
				EnsureNotFrozen();
				_PowTargetTimespan = value;
			}
		}


		TimeSpan _PowTargetSpacing;
		public TimeSpan PowTargetSpacing
		{
			get
			{
				return _PowTargetSpacing;
			}
			set
			{
				EnsureNotFrozen();
				_PowTargetSpacing = value;
			}
		}


		bool _PowAllowMinDifficultyBlocks;
		public bool PowAllowMinDifficultyBlocks
		{
			get
			{
				return _PowAllowMinDifficultyBlocks;
			}
			set
			{
				EnsureNotFrozen();
				_PowAllowMinDifficultyBlocks = value;
			}
		}


		bool _PowNoRetargeting;
		public bool PowNoRetargeting
		{
			get
			{
				return _PowNoRetargeting;
			}
			set
			{
				EnsureNotFrozen();
				_PowNoRetargeting = value;
			}
		}

		internal void SetBlock(byte[] genesis)
		{
			if (genesis == null)
				throw new ArgumentNullException(nameof(genesis));
			EnsureNotFrozen();
			_genesis = genesis;
		}

		uint256? _HashGenesisBlock;
		byte[]? _genesis;
		public uint256 HashGenesisBlock
		{
			get
			{
				if (_HashGenesisBlock == null)
				{
					if (_genesis == null)
						throw new NotImplementedException("The genesis block is missing");
					var block = ConsensusFactory.CreateBlock();
					block.ReadWrite(_genesis, ConsensusFactory);
					_HashGenesisBlock = block.GetHash();
				}
				return _HashGenesisBlock;
			}
		}

		uint256? _MinimumChainWork;
		public uint256? MinimumChainWork
		{
			get
			{
				return _MinimumChainWork;
			}
			set
			{
				EnsureNotFrozen();
				_MinimumChainWork = value;
			}
		}

		public long DifficultyAdjustmentInterval
		{
			get
			{
				return ((long)PowTargetTimespan.TotalSeconds / (long)PowTargetSpacing.TotalSeconds);
			}
		}

		int _MinerConfirmationWindow;
		public int MinerConfirmationWindow
		{
			get
			{
				return _MinerConfirmationWindow;
			}
			set
			{
				EnsureNotFrozen();
				_MinerConfirmationWindow = value;
			}
		}

		int _RuleChangeActivationThreshold;
		public int RuleChangeActivationThreshold
		{
			get
			{
				return _RuleChangeActivationThreshold;
			}
			set
			{
				EnsureNotFrozen();
				_RuleChangeActivationThreshold = value;
			}
		}


		int _CoinbaseMaturity = 100;
		public int CoinbaseMaturity
		{
			get
			{
				return _CoinbaseMaturity;
			}
			set
			{
				EnsureNotFrozen();
				_CoinbaseMaturity = value;
			}
		}

		int _CoinType;

		/// <summary>
		/// Specify the BIP44 coin type for this network
		/// </summary>
		public int CoinType
		{
			get
			{
				return _CoinType;
			}
			set
			{
				EnsureNotFrozen();
				_CoinType = value;
			}
		}


		bool _LitecoinWorkCalculation;
		/// <summary>
		/// Specify using litecoin calculation for difficulty
		/// </summary>
		public bool LitecoinWorkCalculation
		{
			get
			{
				return _LitecoinWorkCalculation;
			}
			set
			{
				EnsureNotFrozen();
				_LitecoinWorkCalculation = value;
			}
		}

		bool frozen = false;
		public void Freeze()
		{
			frozen = true;
		}
		private void EnsureNotFrozen()
		{
			if (frozen)
				throw new InvalidOperationException("This instance can't be modified");
		}

		bool _SupportTaproot = false;
		public bool SupportTaproot
		{
			get
			{
				return _SupportTaproot;
			}
			set
			{
				EnsureNotFrozen();
				_SupportTaproot = value;
			}
		}

		bool _SupportSegwit = false;
		public bool SupportSegwit
		{
			get
			{
				return _SupportSegwit;
			}
			set
			{
				EnsureNotFrozen();
				_SupportSegwit = value;
			}
		}

		bool _NeverNeedPreviousTxForSigning;
		public bool NeverNeedPreviousTxForSigning
		{
			get
			{
				return _NeverNeedPreviousTxForSigning;
			}
			set
			{
				EnsureNotFrozen();
				_NeverNeedPreviousTxForSigning = value;
			}
		}

		public virtual Consensus Clone()
		{
			var consensus = new Consensus();
			Fill(consensus);
			return consensus;
		}

		public TimeSpan GetExpectedTimeFor(double blockCount)
		{
			return TimeSpan.FromSeconds(blockCount * PowTargetSpacing.TotalSeconds);
		}

		public double GetExpectedBlocksFor(TimeSpan timeSpan)
		{
			return timeSpan.TotalSeconds / PowTargetSpacing.TotalSeconds;
		}

		protected void Fill(Consensus consensus)
		{
			consensus.EnsureNotFrozen();
			consensus._BIP34Hash = _BIP34Hash;
			consensus._HashGenesisBlock = _HashGenesisBlock;
			consensus._MajorityEnforceBlockUpgrade = _MajorityEnforceBlockUpgrade;
			consensus._MajorityRejectBlockOutdated = _MajorityRejectBlockOutdated;
			consensus._MajorityWindow = _MajorityWindow;
			consensus._MinerConfirmationWindow = _MinerConfirmationWindow;
			consensus._PowAllowMinDifficultyBlocks = _PowAllowMinDifficultyBlocks;
			consensus._PowLimit = _PowLimit;
			consensus._PowNoRetargeting = _PowNoRetargeting;
			consensus._PowTargetSpacing = _PowTargetSpacing;
			consensus._PowTargetTimespan = _PowTargetTimespan;
			consensus._RuleChangeActivationThreshold = _RuleChangeActivationThreshold;
			consensus._SubsidyHalvingInterval = _SubsidyHalvingInterval;
			consensus._CoinbaseMaturity = _CoinbaseMaturity;
			consensus._MinimumChainWork = _MinimumChainWork;
			consensus._CoinType = CoinType;
			consensus._ConsensusFactory = _ConsensusFactory;
			consensus._LitecoinWorkCalculation = _LitecoinWorkCalculation;
			consensus._SupportSegwit = _SupportSegwit;
			consensus._SupportTaproot = _SupportTaproot;
			consensus._NeverNeedPreviousTxForSigning = _NeverNeedPreviousTxForSigning;
		}
	}
	public partial class Network
	{
		// https://github.com/bitcoin/bitcoin/blob/master/src/chainparamsseeds.h
		// All these entries were prefixed with 0x00 because NBitcoin expects the service flags.
		static byte[] pnSeed6_main = new byte[] {
			0x00,0x01,0x04,0x02,0x27,0xad,0x7e,0x20,0x8d,
			0x00,0x01,0x04,0x03,0x0e,0xa8,0xc9,0xbc,0xcd,
			0x00,0x01,0x04,0x04,0x24,0x70,0x2c,0x20,0x8d,
			0x00,0x01,0x04,0x05,0x08,0x12,0x1f,0x20,0x8d,
			0x00,0x01,0x04,0x05,0x0e,0xc8,0xa7,0x20,0x8d,
			0x00,0x01,0x04,0x05,0x38,0x14,0x02,0x20,0x8d,
			0x00,0x01,0x04,0x05,0x66,0x92,0x63,0x20,0x8d,
			0x00,0x01,0x04,0x05,0x67,0x89,0x92,0x24,0x75,
			0x00,0x01,0x04,0x05,0x80,0x57,0x7e,0x20,0x8d,
			0x00,0x01,0x04,0x05,0x85,0x41,0x52,0x20,0x8d,
			0x00,0x01,0x04,0x05,0xbb,0x37,0xf2,0x20,0x8d,
			0x00,0x01,0x04,0x05,0xbc,0x3e,0x18,0x20,0x8d,
			0x00,0x01,0x04,0x05,0xbc,0x3e,0x21,0x20,0x8d,
			0x00,0x01,0x04,0x05,0xc7,0x85,0xc1,0x20,0x8d,
			0x00,0x01,0x04,0x08,0x26,0x59,0x98,0x20,0x8d,
			0x00,0x01,0x04,0x0d,0xe7,0x14,0xf9,0x20,0x8d,
			0x00,0x01,0x04,0x12,0x1b,0x4f,0x11,0x20,0x8d,
			0x00,0x01,0x04,0x14,0xb8,0x0f,0x74,0x20,0xf1,
			0x00,0x01,0x04,0x17,0x1c,0xcd,0x61,0x20,0x8d,
			0x00,0x01,0x04,0x17,0x6a,0xfc,0xe6,0x20,0x8d,
			0x00,0x01,0x04,0x17,0xaf,0x00,0xca,0x20,0x8d,
			0x00,0x01,0x04,0x17,0xaf,0x00,0xd4,0x20,0x8d,
			0x00,0x01,0x04,0x17,0xf1,0xfa,0xfc,0x20,0x8d,
			0x00,0x01,0x04,0x17,0xf5,0x18,0x9a,0x20,0x8d,
			0x00,0x01,0x04,0x18,0x56,0xb8,0x42,0x20,0x8d,
			0x00,0x01,0x04,0x18,0x74,0xf6,0x09,0x20,0x8d,
			0x00,0x01,0x04,0x18,0x8d,0x22,0xa6,0x20,0x8d,
			0x00,0x01,0x04,0x18,0x9b,0xc4,0xf6,0x20,0x8d,
			0x00,0x01,0x04,0x18,0x9d,0x82,0xde,0x20,0x8d,
			0x00,0x01,0x04,0x18,0xbc,0xb0,0xff,0x20,0x8d,
			0x00,0x01,0x04,0x18,0xed,0x46,0x35,0x20,0x8d,
			0x00,0x01,0x04,0x1b,0x7c,0x04,0x43,0x20,0x8d,
			0x00,0x01,0x04,0x1f,0x11,0x46,0x50,0x20,0x8d,
			0x00,0x01,0x04,0x1f,0x15,0x08,0x20,0x20,0x8d,
			0x00,0x01,0x04,0x1f,0x2d,0x76,0x0a,0x20,0x8d,
			0x00,0x01,0x04,0x1f,0x84,0x11,0x38,0x20,0x8d,
			0x00,0x01,0x04,0x1f,0x86,0x79,0xdf,0x20,0x8d,
			0x00,0x01,0x04,0x20,0xd6,0xb7,0x72,0x20,0x8d,
			0x00,0x01,0x04,0x23,0x89,0xec,0x20,0x20,0x8d,
			0x00,0x01,0x04,0x23,0xb9,0x91,0x69,0x20,0x8d,
			0x00,0x01,0x04,0x23,0xd1,0x33,0xd4,0x20,0x8d,
			0x00,0x01,0x04,0x23,0xf5,0xaf,0x4c,0x20,0x8d,
			0x00,0x01,0x04,0x25,0x74,0x5f,0x29,0x20,0x8d,
			0x00,0x01,0x04,0x25,0x8f,0x09,0x6b,0x20,0x8d,
			0x00,0x01,0x04,0x25,0x8f,0x74,0x2b,0x20,0x8d,
			0x00,0x01,0x04,0x25,0xbf,0xf4,0x95,0x20,0x8d,
			0x00,0x01,0x04,0x25,0xd3,0x4e,0xfd,0x20,0x8d,
			0x00,0x01,0x04,0x25,0xdd,0xd1,0xde,0x5f,0x0d,
			0x00,0x01,0x04,0x25,0xe4,0x5c,0x6e,0x20,0x8d,
			0x00,0x01,0x04,0x2b,0xe1,0x3e,0x6b,0x20,0x8d,
			0x00,0x01,0x04,0x2b,0xe1,0x9d,0x98,0x20,0x8d,
			0x00,0x01,0x04,0x2d,0x24,0xb8,0x06,0x20,0x8d,
			0x00,0x01,0x04,0x2d,0x30,0xa8,0x10,0x20,0x8d,
			0x00,0x01,0x04,0x2d,0x55,0x55,0x08,0x20,0x8d,
			0x00,0x01,0x04,0x2d,0x55,0x55,0x09,0x20,0x8d,
			0x00,0x01,0x04,0x2d,0x81,0xb4,0xd6,0x20,0x8d,
			0x00,0x01,0x04,0x2d,0x95,0x4e,0x80,0x20,0x8d,
			0x00,0x01,0x04,0x2d,0x97,0x7d,0xda,0x20,0x8d,
			0x00,0x01,0x04,0x2d,0x9a,0xff,0x2e,0x20,0x8d,
			0x00,0x01,0x04,0x2d,0x9b,0x9d,0xef,0x20,0x8d,
			0x00,0x01,0x04,0x2e,0x1c,0x84,0x22,0x20,0x8d,
			0x00,0x01,0x04,0x2e,0x1c,0xcc,0x15,0x20,0x8d,
			0x00,0x01,0x04,0x2e,0x20,0x32,0x62,0x20,0x8d,
			0x00,0x01,0x04,0x2e,0x3b,0x0d,0x23,0x20,0x8d,
			0x00,0x01,0x04,0x2e,0x80,0x28,0xad,0x20,0x8d,
			0x00,0x01,0x04,0x2e,0x80,0x8c,0xc1,0x20,0x8d,
			0x00,0x01,0x04,0x2e,0x92,0xf8,0x59,0x20,0x8d,
			0x00,0x01,0x04,0x2e,0xa6,0xa2,0x2d,0x4e,0x21,
			0x00,0x01,0x04,0x2e,0xbc,0x0f,0x06,0x20,0x8d,
			0x00,0x01,0x04,0x2e,0xe5,0xa5,0x8e,0x20,0x8d,
			0x00,0x01,0x04,0x2e,0xe5,0xee,0xbb,0x20,0x8d,
			0x00,0x01,0x04,0x2e,0xf9,0x53,0x52,0x20,0x8d,
			0x00,0x01,0x04,0x2e,0xfe,0xd9,0xa9,0x20,0x8d,
			0x00,0x01,0x04,0x2f,0x4a,0xbf,0x22,0x20,0x8d,
			0x00,0x01,0x04,0x2f,0x73,0x35,0xa3,0x20,0x8d,
			0x00,0x01,0x04,0x2f,0xbb,0x1a,0x87,0x20,0x8d,
			0x00,0x01,0x04,0x2f,0xde,0x67,0xea,0x20,0x8d,
			0x00,0x01,0x04,0x2f,0xfd,0x05,0x63,0x20,0x8d,
			0x00,0x01,0x04,0x31,0xe8,0x52,0x4c,0x20,0x8d,
			0x00,0x01,0x04,0x31,0xf7,0xd7,0x2b,0x20,0x8d,
			0x00,0x01,0x04,0x32,0x02,0x0d,0xa6,0x20,0x8d,
			0x00,0x01,0x04,0x32,0x22,0x27,0x48,0x20,0x8d,
			0x00,0x01,0x04,0x32,0x2d,0xe8,0xbd,0x20,0x8d,
			0x00,0x01,0x04,0x32,0x44,0x68,0x5c,0x20,0x8d,
			0x00,0x01,0x04,0x33,0x44,0x24,0x39,0x20,0x8d,
			0x00,0x01,0x04,0x33,0x9a,0x3c,0x22,0x20,0x8d,
			0x00,0x01,0x04,0x34,0xa9,0xee,0x42,0x20,0x8d,
			0x00,0x01,0x04,0x36,0xc5,0x1e,0xdf,0x20,0x8d,
			0x00,0x01,0x04,0x36,0xe3,0x42,0x39,0x20,0x8d,
			0x00,0x01,0x04,0x3a,0x9e,0x00,0x56,0x20,0x8d,
			0x00,0x01,0x04,0x3a,0xab,0x87,0xf2,0x20,0x8d,
			0x00,0x01,0x04,0x3a,0xe5,0xd0,0x9e,0x20,0x8d,
			0x00,0x01,0x04,0x3c,0xf4,0x6d,0x13,0x20,0x8d,
			0x00,0x01,0x04,0x3e,0x26,0x4b,0xd0,0x20,0x8d,
			0x00,0x01,0x04,0x3e,0x4a,0x8f,0x0b,0x20,0x8d,
			0x00,0x01,0x04,0x3e,0x50,0xe3,0x31,0x20,0x8d,
			0x00,0x01,0x04,0x3e,0x98,0x3a,0x10,0x24,0xcd,
			0x00,0x01,0x04,0x3e,0xd2,0xa7,0xc7,0x20,0x8d,
			0x00,0x01,0x04,0x3e,0xea,0xbc,0xa0,0x20,0x8d,
			0x00,0x01,0x04,0x3e,0xfb,0x36,0xa3,0x20,0x8d,
			0x00,0x01,0x04,0x3f,0xe3,0x74,0xa2,0x20,0x8d,
			0x00,0x01,0x04,0x41,0x13,0x9b,0x52,0x20,0x8d,
			0x00,0x01,0x04,0x41,0x5f,0x31,0x66,0x20,0x8d,
			0x00,0x01,0x04,0x42,0x12,0xac,0x15,0x20,0x8d,
			0x00,0x01,0x04,0x42,0xf0,0xed,0x9b,0x20,0x8d,
			0x00,0x01,0x04,0x43,0xd2,0xe4,0xcb,0x20,0x8d,
			0x00,0x01,0x04,0x45,0x1e,0xd7,0x2a,0x20,0x8d,
			0x00,0x01,0x04,0x45,0x3b,0x12,0xce,0x20,0x8d,
			0x00,0x01,0x04,0x45,0x40,0x21,0x47,0x20,0x8d,
			0x00,0x01,0x04,0x45,0x77,0xc1,0x09,0x20,0x8d,
			0x00,0x01,0x04,0x45,0xd1,0x17,0x48,0x20,0x8d,
			0x00,0x01,0x04,0x46,0x7b,0x7d,0xed,0x20,0x8d,
			0x00,0x01,0x04,0x46,0xb9,0x38,0x88,0x20,0x8d,
			0x00,0x01,0x04,0x47,0x26,0x5a,0xeb,0x20,0x8d,
			0x00,0x01,0x04,0x48,0x0c,0x49,0x46,0x20,0x8d,
			0x00,0x01,0x04,0x48,0x35,0x86,0xb6,0x20,0x8d,
			0x00,0x01,0x04,0x48,0xe1,0x07,0x50,0x20,0x8d,
			0x00,0x01,0x04,0x48,0xea,0xb6,0x27,0x20,0x8d,
			0x00,0x01,0x04,0x48,0xfa,0xb8,0x39,0x20,0x8d,
			0x00,0x01,0x04,0x49,0x53,0x67,0x4f,0x20,0x8d,
			0x00,0x01,0x04,0x4a,0x76,0x89,0x77,0x20,0x8d,
			0x00,0x01,0x04,0x4a,0x85,0x64,0x4a,0x20,0x8d,
			0x00,0x01,0x04,0x4a,0xd7,0xdb,0xd6,0x20,0x8d,
			0x00,0x01,0x04,0x4a,0xdc,0xff,0xbe,0x20,0x8d,
			0x00,0x01,0x04,0x4b,0x9e,0x27,0xe7,0x20,0x8d,
			0x00,0x01,0x04,0x4d,0x35,0x35,0xc4,0x20,0x8d,
			0x00,0x01,0x04,0x4d,0x46,0x10,0xf5,0x20,0x8d,
			0x00,0x01,0x04,0x4d,0x69,0x57,0x61,0x20,0x8d,
			0x00,0x01,0x04,0x4d,0x78,0x71,0x45,0x20,0xf1,
			0x00,0x01,0x04,0x4d,0x78,0x7a,0x16,0x20,0xf1,
			0x00,0x01,0x04,0x4d,0xa6,0x53,0xa7,0x20,0x8d,
			0x00,0x01,0x04,0x4d,0xf7,0xb2,0x82,0x20,0x8d,
			0x00,0x01,0x04,0x4e,0x1b,0x8b,0x0d,0x20,0x8d,
			0x00,0x01,0x04,0x4e,0x3f,0x1c,0x92,0x20,0x8d,
			0x00,0x01,0x04,0x4e,0x53,0x67,0x04,0x20,0x8d,
			0x00,0x01,0x04,0x4e,0x8d,0x7b,0x63,0x20,0x8d,
			0x00,0x01,0x04,0x4f,0x4d,0x21,0x83,0x20,0x8d,
			0x00,0x01,0x04,0x4f,0x4d,0x85,0x1e,0x20,0x8d,
			0x00,0x01,0x04,0x4f,0x65,0x01,0x19,0x20,0x8d,
			0x00,0x01,0x04,0x4f,0x75,0xc0,0xe5,0x20,0x8d,
			0x00,0x01,0x04,0x4f,0x85,0xe4,0x37,0x20,0x8d,
			0x00,0x01,0x04,0x4f,0x92,0x15,0xa3,0x20,0x8d,
			0x00,0x01,0x04,0x50,0x59,0xcb,0xac,0x1f,0x41,
			0x00,0x01,0x04,0x50,0x5d,0xd5,0xf6,0x20,0x8d,
			0x00,0x01,0x04,0x50,0xc0,0x62,0x6e,0x20,0x8e,
			0x00,0x01,0x04,0x50,0xe5,0x1c,0x3c,0x20,0x8d,
			0x00,0x01,0x04,0x50,0xe8,0xf7,0xd2,0x20,0x8d,
			0x00,0x01,0x04,0x50,0xf2,0x27,0x4c,0x20,0x8d,
			0x00,0x01,0x04,0x50,0xfd,0x5e,0xfc,0x20,0x8d,
			0x00,0x01,0x04,0x51,0x00,0xc6,0x19,0x20,0x8d,
			0x00,0x01,0x04,0x51,0x07,0x0d,0x54,0x20,0x8d,
			0x00,0x01,0x04,0x51,0x75,0xe1,0xf5,0x20,0x8d,
			0x00,0x01,0x04,0x51,0x87,0x89,0xe1,0x20,0x8d,
			0x00,0x01,0x04,0x51,0xab,0x16,0x8f,0x20,0x8d,
			0x00,0x01,0x04,0x51,0xbf,0xe9,0x86,0x20,0x8d,
			0x00,0x01,0x04,0x51,0xe8,0x4e,0x4b,0x20,0x8d,
			0x00,0x01,0x04,0x51,0xf2,0x5b,0x17,0x20,0x8d,
			0x00,0x01,0x04,0x52,0x1d,0x3a,0x6d,0x20,0x8d,
			0x00,0x01,0x04,0x52,0x88,0x63,0x16,0x20,0x8d,
			0x00,0x01,0x04,0x52,0x95,0x61,0x19,0x44,0x9f,
			0x00,0x01,0x04,0x52,0xa5,0x13,0x30,0x20,0x8d,
			0x00,0x01,0x04,0x52,0xc2,0x99,0xe9,0x20,0x8d,
			0x00,0x01,0x04,0x52,0xc5,0xd7,0x7d,0x20,0x8d,
			0x00,0x01,0x04,0x52,0xc7,0x66,0x0a,0x20,0x8d,
			0x00,0x01,0x04,0x52,0xc8,0xcd,0x1e,0x20,0x8d,
			0x00,0x01,0x04,0x52,0xca,0x44,0xe7,0x20,0x8d,
			0x00,0x01,0x04,0x52,0xdd,0x80,0x1f,0x20,0x8d,
			0x00,0x01,0x04,0x52,0xe4,0x06,0x83,0x20,0x8d,
			0x00,0x01,0x04,0x53,0x55,0x8b,0x5e,0x20,0x8d,
			0x00,0x01,0x04,0x53,0x63,0xf5,0x14,0x20,0x8d,
			0x00,0x01,0x04,0x53,0x89,0x29,0x0a,0x20,0x8d,
			0x00,0x01,0x04,0x53,0xae,0xd1,0x57,0x20,0x8d,
			0x00,0x01,0x04,0x53,0xd9,0x08,0x1f,0xad,0x84,
			0x00,0x01,0x04,0x54,0x26,0x03,0xf9,0x20,0x8d,
			0x00,0x01,0x04,0x54,0x26,0xb9,0x7a,0x20,0x8d,
			0x00,0x01,0x04,0x54,0x5c,0x5c,0xf7,0x20,0x8d,
			0x00,0x01,0x04,0x54,0xc0,0x10,0xea,0x20,0x8d,
			0x00,0x01,0x04,0x54,0xc2,0x9e,0x7c,0x20,0x8d,
			0x00,0x01,0x04,0x54,0xd4,0x91,0x18,0x20,0x8d,
			0x00,0x01,0x04,0x54,0xd4,0xf4,0x5f,0x20,0x8d,
			0x00,0x01,0x04,0x54,0xd8,0x33,0x24,0x20,0x8d,
			0x00,0x01,0x04,0x54,0xff,0xf9,0xa3,0x20,0x8d,
			0x00,0x01,0x04,0x55,0x19,0xff,0x93,0x20,0x8d,
			0x00,0x01,0x04,0x55,0x46,0x9c,0xd1,0x20,0x8d,
			0x00,0x01,0x04,0x55,0x91,0x8e,0x2e,0x20,0x8d,
			0x00,0x01,0x04,0x55,0xaa,0xe9,0x5f,0x20,0x8d,
			0x00,0x01,0x04,0x55,0xb8,0x8a,0x6c,0x20,0x8d,
			0x00,0x01,0x04,0x55,0xbe,0x00,0x05,0x20,0x8d,
			0x00,0x01,0x04,0x55,0xbf,0xc8,0x33,0x20,0x8d,
			0x00,0x01,0x04,0x55,0xc0,0xbf,0x06,0x48,0x44,
			0x00,0x01,0x04,0x55,0xc2,0xee,0x83,0x20,0x8d,
			0x00,0x01,0x04,0x55,0xc3,0x36,0x6e,0x20,0x8d,
			0x00,0x01,0x04,0x55,0xd6,0xa1,0xfc,0x20,0x8d,
			0x00,0x01,0x04,0x55,0xd6,0xb9,0x33,0x20,0x8d,
			0x00,0x01,0x04,0x55,0xf1,0x6a,0xcb,0x20,0x8d,
			0x00,0x01,0x04,0x55,0xf6,0xa8,0xfc,0x20,0x8d,
			0x00,0x01,0x04,0x56,0x38,0xee,0xf7,0x20,0x8d,
			0x00,0x01,0x04,0x57,0x3d,0x5a,0xe6,0x20,0x8d,
			0x00,0x01,0x04,0x57,0x4f,0x44,0x56,0x20,0x8d,
			0x00,0x01,0x04,0x57,0x4f,0x5e,0xdd,0x20,0x8d,
			0x00,0x01,0x04,0x57,0x78,0x08,0x05,0x4e,0x28,
			0x00,0x01,0x04,0x57,0xf6,0x2e,0x84,0x20,0x8d,
			0x00,0x01,0x04,0x57,0xf7,0x6f,0xde,0x20,0x8d,
			0x00,0x01,0x04,0x58,0x54,0xde,0xfc,0x20,0x8d,
			0x00,0x01,0x04,0x58,0x56,0xf3,0xf1,0x20,0x8d,
			0x00,0x01,0x04,0x58,0x57,0x5d,0x34,0x06,0x9b,
			0x00,0x01,0x04,0x58,0x77,0xc5,0xc8,0x20,0x8d,
			0x00,0x01,0x04,0x58,0x81,0xfd,0x5e,0x20,0x8d,
			0x00,0x01,0x04,0x58,0x93,0xf4,0xfa,0x20,0x8d,
			0x00,0x01,0x04,0x58,0xd0,0x03,0xc3,0x20,0x8d,
			0x00,0x01,0x04,0x58,0xd4,0x2c,0x21,0x20,0x8d,
			0x00,0x01,0x04,0x58,0xd6,0x39,0x5f,0x20,0x8d,
			0x00,0x01,0x04,0x59,0x6a,0xc7,0x26,0x20,0x8d,
			0x00,0x01,0x04,0x59,0x6c,0x7e,0xe4,0x20,0x8d,
			0x00,0x01,0x04,0x59,0x73,0x78,0x2b,0x20,0x8d,
			0x00,0x01,0x04,0x59,0x85,0x44,0x41,0x20,0x8d,
			0x00,0x01,0x04,0x59,0xbe,0x13,0xa2,0x20,0x8d,
			0x00,0x01,0x04,0x59,0xf8,0xac,0x0a,0x20,0x8d,
			0x00,0x01,0x04,0x5a,0x92,0x99,0x15,0x20,0x8d,
			0x00,0x01,0x04,0x5a,0xb6,0xa5,0x12,0x20,0x8d,
			0x00,0x01,0x04,0x5b,0x6a,0xbc,0xe5,0x20,0x8d,
			0x00,0x01,0x04,0x5b,0xc1,0xed,0x74,0x20,0x8d,
			0x00,0x01,0x04,0x5b,0xcc,0x63,0xb2,0x20,0x8d,
			0x00,0x01,0x04,0x5b,0xcc,0x95,0x05,0x20,0x8d,
			0x00,0x01,0x04,0x5b,0xd6,0x46,0x3f,0x20,0x8d,
			0x00,0x01,0x04,0x5b,0xe4,0x98,0xec,0x20,0x8d,
			0x00,0x01,0x04,0x5c,0x0c,0x9a,0x73,0x20,0x8d,
			0x00,0x01,0x04,0x5c,0xf9,0x8f,0x2c,0x20,0x8d,
			0x00,0x01,0x04,0x5d,0x0c,0x42,0x62,0x20,0x8d,
			0x00,0x01,0x04,0x5d,0x2e,0x36,0x04,0x20,0x8d,
			0x00,0x01,0x04,0x5d,0x73,0x14,0x82,0x20,0x8d,
			0x00,0x01,0x04,0x5d,0x7b,0xb4,0xa4,0x20,0x8d,
			0x00,0x01,0x04,0x5d,0xbd,0x91,0xa9,0x20,0x8d,
			0x00,0x01,0x04,0x5d,0xf1,0xe4,0x66,0x20,0x8d,
			0x00,0x01,0x04,0x5e,0x13,0x07,0x37,0x20,0x8d,
			0x00,0x01,0x04,0x5e,0x13,0x80,0xcc,0x20,0x8d,
			0x00,0x01,0x04,0x5e,0x34,0x70,0xe3,0x20,0x8d,
			0x00,0x01,0x04,0x5e,0x9a,0x60,0x82,0x20,0x8d,
			0x00,0x01,0x04,0x5e,0x9c,0xae,0xc9,0x20,0x8d,
			0x00,0x01,0x04,0x5e,0x9e,0xf6,0xb7,0x20,0x8d,
			0x00,0x01,0x04,0x5e,0xb1,0xab,0x49,0x20,0x8d,
			0x00,0x01,0x04,0x5e,0xc7,0xb2,0xe9,0x1f,0xa4,
			0x00,0x01,0x04,0x5e,0xed,0x7d,0x1e,0x20,0x8d,
			0x00,0x01,0x04,0x5e,0xf7,0x86,0x4d,0x20,0x8d,
			0x00,0x01,0x04,0x5f,0x30,0xe4,0x2d,0x20,0x8d,
			0x00,0x01,0x04,0x5f,0x45,0xf9,0x3f,0x20,0x8d,
			0x00,0x01,0x04,0x5f,0x52,0x92,0x46,0x20,0x8d,
			0x00,0x01,0x04,0x5f,0x53,0x49,0x1f,0x20,0x8d,
			0x00,0x01,0x04,0x5f,0x54,0xa4,0x2b,0x20,0x8d,
			0x00,0x01,0x04,0x5f,0x57,0xe2,0x38,0x20,0x8d,
			0x00,0x01,0x04,0x5f,0x6e,0xea,0x5d,0x20,0x8d,
			0x00,0x01,0x04,0x5f,0xa3,0x47,0x7e,0x20,0x8d,
			0x00,0x01,0x04,0x5f,0xa4,0x41,0xc2,0x20,0x8d,
			0x00,0x01,0x04,0x5f,0xae,0x42,0xd3,0x20,0x8d,
			0x00,0x01,0x04,0x5f,0xd3,0xae,0x89,0x20,0x8d,
			0x00,0x01,0x04,0x5f,0xd8,0x0b,0x9c,0x20,0xf1,
			0x00,0x01,0x04,0x60,0x2f,0x72,0x6c,0x20,0x8d,
			0x00,0x01,0x04,0x61,0x54,0xe8,0x69,0x20,0x8d,
			0x00,0x01,0x04,0x61,0x63,0xcd,0xf1,0x20,0x8d,
			0x00,0x01,0x04,0x62,0x19,0xc1,0x72,0x20,0x8d,
			0x00,0x01,0x04,0x63,0x73,0x19,0x0d,0x20,0x8d,
			0x00,0x01,0x04,0x65,0x20,0x13,0xb8,0x20,0x8d,
			0x00,0x01,0x04,0x65,0x64,0xae,0xf0,0x20,0x8d,
			0x00,0x01,0x04,0x66,0x84,0xf5,0x10,0x20,0x8d,
			0x00,0x01,0x04,0x67,0x0e,0xf4,0xbe,0x20,0x8d,
			0x00,0x01,0x04,0x67,0x4c,0x30,0x05,0x20,0x8d,
			0x00,0x01,0x04,0x67,0x54,0x54,0xfa,0x20,0x8f,
			0x00,0x01,0x04,0x67,0x63,0xa8,0x96,0x20,0x8d,
			0x00,0x01,0x04,0x67,0x6d,0x65,0xd8,0x20,0x8d,
			0x00,0x01,0x04,0x67,0x7a,0xf7,0x66,0x20,0x8d,
			0x00,0x01,0x04,0x67,0x81,0x0d,0x2d,0x20,0x8d,
			0x00,0x01,0x04,0x67,0xc6,0xc0,0x0e,0x4e,0x28,
			0x00,0x01,0x04,0x67,0xe0,0x77,0x63,0x20,0x8d,
			0x00,0x01,0x04,0x67,0xe7,0xbf,0x07,0x20,0x8d,
			0x00,0x01,0x04,0x67,0xeb,0xe6,0xc4,0x20,0x8d,
			0x00,0x01,0x04,0x68,0xab,0xf2,0x9b,0x20,0x8d,
			0x00,0x01,0x04,0x68,0xee,0xdc,0xc7,0x20,0x8d,
			0x00,0x01,0x04,0x6a,0xa3,0x9e,0x7f,0x20,0x8d,
			0x00,0x01,0x04,0x6b,0x96,0x29,0xb3,0x20,0x8d,
			0x00,0x01,0x04,0x6b,0x9f,0x5d,0x67,0x20,0x8d,
			0x00,0x01,0x04,0x6c,0xb7,0x4d,0x0c,0x20,0x8d,
			0x00,0x01,0x04,0x6d,0x09,0xaf,0x41,0x20,0x8d,
			0x00,0x01,0x04,0x6d,0x63,0x3f,0x9f,0x20,0x8d,
			0x00,0x01,0x04,0x6d,0x6e,0x51,0x5a,0x20,0x8d,
			0x00,0x01,0x04,0x6d,0x7b,0xd5,0x82,0x20,0x8d,
			0x00,0x01,0x04,0x6d,0x86,0xe8,0x51,0x20,0x8d,
			0x00,0x01,0x04,0x6d,0xa9,0x14,0xa8,0x20,0x8d,
			0x00,0x01,0x04,0x6d,0xc7,0xf1,0x94,0x20,0x8d,
			0x00,0x01,0x04,0x6d,0xe5,0xd2,0x06,0x20,0x8d,
			0x00,0x01,0x04,0x6d,0xec,0x69,0x28,0x20,0x8d,
			0x00,0x01,0x04,0x6d,0xf8,0xce,0x0d,0x20,0x8d,
			0x00,0x01,0x04,0x6f,0x2a,0x4a,0x41,0x20,0x8d,
			0x00,0x01,0x04,0x6f,0x5a,0x8c,0xb3,0x20,0x8d,
			0x00,0x01,0x04,0x70,0xd7,0xcd,0xec,0x20,0x8d,
			0x00,0x01,0x04,0x71,0x34,0x87,0x7d,0x20,0x8d,
			0x00,0x01,0x04,0x72,0x17,0xf6,0x89,0x20,0x8d,
			0x00,0x01,0x04,0x73,0x2f,0x8d,0xfa,0x22,0xb5,
			0x00,0x01,0x04,0x73,0x46,0x6e,0x04,0x20,0x8d,
			0x00,0x01,0x04,0x74,0x22,0xbd,0x37,0x20,0x8d,
			0x00,0x01,0x04,0x76,0x67,0x7e,0x8c,0x6e,0xad,
			0x00,0x01,0x04,0x76,0xbd,0xbb,0xdb,0x20,0x8d,
			0x00,0x01,0x04,0x77,0x03,0xd0,0xec,0x20,0x8d,
			0x00,0x01,0x04,0x77,0x08,0x2f,0xe1,0x20,0x8d,
			0x00,0x01,0x04,0x77,0x11,0x97,0x3d,0x20,0x8d,
			0x00,0x01,0x04,0x78,0x19,0x18,0x1e,0x20,0x8d,
			0x00,0x01,0x04,0x78,0xf1,0x22,0x0a,0x20,0x8d,
			0x00,0x01,0x04,0x79,0x62,0xcd,0x64,0x20,0x8d,
			0x00,0x01,0x04,0x7a,0x70,0x94,0x99,0x20,0x93,
			0x00,0x01,0x04,0x7a,0x74,0x2a,0x8c,0x20,0x8d,
			0x00,0x01,0x04,0x7c,0xd9,0xeb,0xb4,0x20,0x8d,
			0x00,0x01,0x04,0x7d,0xec,0xd7,0x85,0x20,0x8d,
			0x00,0x01,0x04,0x81,0x0d,0xbd,0xd4,0x20,0x8d,
			0x00,0x01,0x04,0x82,0xb9,0x4d,0x69,0x20,0x8d,
			0x00,0x01,0x04,0x83,0xbc,0x28,0xbf,0x20,0x8d,
			0x00,0x01,0x04,0x83,0xc1,0xdc,0x0f,0x20,0x8d,
			0x00,0x01,0x04,0x87,0x17,0x7c,0xef,0x20,0x8d,
			0x00,0x01,0x04,0x88,0x21,0xb9,0x20,0x20,0x8d,
			0x00,0x01,0x04,0x88,0x38,0xaa,0x60,0x20,0x8d,
			0x00,0x01,0x04,0x89,0xe2,0x22,0x2e,0x20,0x8d,
			0x00,0x01,0x04,0x8a,0xe5,0x1a,0x2a,0x20,0x8d,
			0x00,0x01,0x04,0x8b,0x09,0xf9,0xea,0x20,0x8d,
			0x00,0x01,0x04,0x8d,0x65,0x08,0x24,0x20,0x8d,
			0x00,0x01,0x04,0x8f,0xb0,0xe0,0x68,0x20,0x8d,
			0x00,0x01,0x04,0x90,0x02,0x45,0xe0,0x20,0x8d,
			0x00,0x01,0x04,0x90,0x22,0xa1,0x41,0x47,0x9d,
			0x00,0x01,0x04,0x90,0x5b,0x74,0x2c,0x20,0x8d,
			0x00,0x01,0x04,0x90,0x89,0x1d,0xb5,0x20,0x8d,
			0x00,0x01,0x04,0x94,0x42,0x32,0x32,0x20,0x8f,
			0x00,0x01,0x04,0x94,0x48,0x96,0xe7,0x20,0x8d,
			0x00,0x01,0x04,0x94,0xaa,0xd4,0x2c,0x20,0x8d,
			0x00,0x01,0x04,0x95,0xa7,0x63,0xbe,0x20,0x8d,
			0x00,0x01,0x04,0x9a,0x5c,0x10,0xbf,0x20,0x8d,
			0x00,0x01,0x04,0x9a,0xdd,0x1b,0x15,0x20,0x8d,
			0x00,0x01,0x04,0x9c,0x13,0x13,0x5a,0x20,0x8d,
			0x00,0x01,0x04,0x9c,0xf1,0x05,0xbe,0x20,0x8d,
			0x00,0x01,0x04,0x9d,0x0d,0x3d,0x4c,0x20,0x8d,
			0x00,0x01,0x04,0x9d,0x0d,0x3d,0x50,0x20,0x8d,
			0x00,0x01,0x04,0x9d,0xe6,0xa6,0x62,0x38,0x37,
			0x00,0x01,0x04,0x9e,0x4b,0xcb,0x02,0x20,0x8d,
			0x00,0x01,0x04,0x9e,0xb5,0x7d,0x96,0x20,0x8d,
			0x00,0x01,0x04,0x9e,0xb5,0xe2,0x21,0x20,0x8d,
			0x00,0x01,0x04,0x9f,0x64,0xf2,0xfe,0x20,0x8d,
			0x00,0x01,0x04,0x9f,0x64,0xf8,0xea,0x20,0x8d,
			0x00,0x01,0x04,0x9f,0x8a,0x57,0x12,0x20,0x8d,
			0x00,0x01,0x04,0xa0,0x10,0x00,0x1e,0x20,0x8d,
			0x00,0x01,0x04,0xa2,0x00,0xe3,0x36,0x20,0x8d,
			0x00,0x01,0x04,0xa2,0x00,0xe3,0x38,0x20,0x8d,
			0x00,0x01,0x04,0xa2,0x3e,0x12,0xe2,0x20,0x8d,
			0x00,0x01,0x04,0xa2,0xd1,0x01,0xe9,0x20,0x8d,
			0x00,0x01,0x04,0xa2,0xf3,0xaf,0x56,0x20,0x8d,
			0x00,0x01,0x04,0xa2,0xf4,0x50,0xd0,0x20,0x8d,
			0x00,0x01,0x04,0xa2,0xfa,0xbc,0x57,0x20,0x8d,
			0x00,0x01,0x04,0xa2,0xfa,0xbd,0x35,0x20,0x8d,
			0x00,0x01,0x04,0xa3,0x9e,0xca,0x70,0x20,0x8d,
			0x00,0x01,0x04,0xa3,0x9e,0xf3,0xe6,0x20,0x8d,
			0x00,0x01,0x04,0xa5,0x49,0x3e,0x1f,0x20,0x8d,
			0x00,0x01,0x04,0xa6,0x3e,0x52,0x67,0x80,0x03,
			0x00,0x01,0x04,0xa6,0x46,0x5e,0x6a,0x20,0x8d,
			0x00,0x01,0x04,0xa7,0x56,0x5a,0xef,0x20,0x8d,
			0x00,0x01,0x04,0xa9,0x2c,0x22,0xcb,0x20,0x8d,
			0x00,0x01,0x04,0xac,0x5d,0x65,0x49,0x20,0x8d,
			0x00,0x01,0x04,0xac,0x69,0x07,0x2f,0x20,0x8d,
			0x00,0x01,0x04,0xad,0x17,0x67,0x1e,0x1f,0x40,
			0x00,0x01,0x04,0xad,0x35,0x4f,0x06,0x20,0x8d,
			0x00,0x01,0x04,0xad,0x46,0x0c,0x56,0x20,0x8d,
			0x00,0x01,0x04,0xad,0x59,0x1c,0x89,0x20,0x8d,
			0x00,0x01,0x04,0xad,0xb0,0xb8,0x36,0x20,0x8d,
			0x00,0x01,0x04,0xad,0xd0,0x80,0x0a,0x20,0x8d,
			0x00,0x01,0x04,0xad,0xfe,0xcc,0x45,0x20,0x8d,
			0x00,0x01,0x04,0xad,0xff,0xcc,0x7c,0x20,0x8d,
			0x00,0x01,0x04,0xae,0x5e,0x9b,0xe0,0x20,0x8d,
			0x00,0x01,0x04,0xae,0x72,0x66,0x29,0x20,0x8d,
			0x00,0x01,0x04,0xae,0x72,0x7c,0x0c,0x20,0x8d,
			0x00,0x01,0x04,0xb0,0x0a,0xe3,0x3b,0x20,0x8d,
			0x00,0x01,0x04,0xb0,0x1f,0xe0,0xd6,0x20,0x8d,
			0x00,0x01,0x04,0xb0,0x4a,0x88,0xed,0x20,0x8d,
			0x00,0x01,0x04,0xb0,0x63,0x02,0xcf,0x20,0x8d,
			0x00,0x01,0x04,0xb0,0x6a,0xbf,0x02,0x20,0x8d,
			0x00,0x01,0x04,0xb0,0xa0,0xe4,0x09,0x20,0x8d,
			0x00,0x01,0x04,0xb0,0xbf,0xb6,0x03,0x20,0x8d,
			0x00,0x01,0x04,0xb0,0xd4,0xb9,0x99,0x20,0x8d,
			0x00,0x01,0x04,0xb0,0xf1,0x89,0xb7,0x20,0x8d,
			0x00,0x01,0x04,0xb1,0x26,0xd7,0x49,0x20,0x8d,
			0x00,0x01,0x04,0xb2,0x10,0xde,0x92,0x20,0x8d,
			0x00,0x01,0x04,0xb2,0x84,0x02,0xf6,0x20,0x8d,
			0x00,0x01,0x04,0xb2,0x8f,0xbf,0xab,0x20,0x8d,
			0x00,0x01,0x04,0xb2,0x94,0xac,0xd1,0x20,0x8d,
			0x00,0x01,0x04,0xb2,0x94,0xe2,0xb4,0x20,0x8d,
			0x00,0x01,0x04,0xb2,0x96,0x60,0x2e,0x20,0x8d,
			0x00,0x01,0x04,0xb2,0xb6,0xe3,0x32,0x20,0x8d,
			0x00,0x01,0x04,0xb2,0xec,0x89,0x3f,0x20,0x8d,
			0x00,0x01,0x04,0xb2,0xff,0x2a,0x7e,0x20,0x8d,
			0x00,0x01,0x04,0xb4,0x96,0x34,0x25,0x20,0x8d,
			0x00,0x01,0x04,0xb5,0x27,0x20,0x63,0x20,0x8d,
			0x00,0x01,0x04,0xb5,0x30,0x4d,0x1a,0x20,0x8d,
			0x00,0x01,0x04,0xb5,0x34,0xdf,0x34,0x20,0x8d,
			0x00,0x01,0x04,0xb5,0xee,0x33,0x98,0x20,0x8d,
			0x00,0x01,0x04,0xb7,0x58,0xdf,0xd0,0x20,0x8d,
			0x00,0x01,0x04,0xb7,0x6e,0xdc,0xd2,0x76,0x5d,
			0x00,0x01,0x04,0xb8,0x5f,0x3a,0xa6,0x20,0x90,
			0x00,0x01,0x04,0xb8,0xa4,0x93,0x52,0xa1,0x75,
			0x00,0x01,0x04,0xb8,0xab,0xd0,0x6d,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0x19,0x30,0x27,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0x19,0x30,0xb8,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0x40,0x74,0x0f,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0x50,0xdb,0x84,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0x55,0x03,0x8c,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0x5f,0xdb,0x35,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0x6c,0xf4,0x29,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0x86,0xe9,0x79,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0x91,0x80,0x15,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0x94,0x03,0xe3,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0x99,0xc4,0xf0,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0x9e,0x72,0xb8,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0xa5,0xa8,0xc4,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0xb5,0xe6,0x4a,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0xb9,0x1a,0x8d,0x1f,0xaf,
			0x00,0x01,0x04,0xb9,0xba,0xd0,0xa2,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0xbd,0x84,0xb2,0xe1,0xb4,
			0x00,0x01,0x04,0xb9,0xd3,0x3b,0x32,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0xe9,0x94,0x92,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0xee,0x81,0x71,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0xf9,0xc7,0x6a,0x20,0x8d,
			0x00,0x01,0x04,0xb9,0xfb,0xa1,0x36,0x20,0x8d,
			0x00,0x01,0x04,0xbb,0xbd,0x99,0x88,0x20,0x8d,
			0x00,0x01,0x04,0xbc,0x25,0x18,0xbe,0x20,0x8d,
			0x00,0x01,0x04,0xbc,0x2a,0x28,0xea,0x47,0x9d,
			0x00,0x01,0x04,0xbc,0x3d,0x2e,0x24,0x20,0x8d,
			0x00,0x01,0x04,0xbc,0x44,0x2d,0x8f,0x20,0x8d,
			0x00,0x01,0x04,0xbc,0x7f,0xe5,0x69,0x20,0x8d,
			0x00,0x01,0x04,0xbc,0x86,0x06,0x54,0x20,0x8d,
			0x00,0x01,0x04,0xbc,0x86,0x08,0x24,0x20,0x8d,
			0x00,0x01,0x04,0xbc,0xd6,0x81,0x41,0x4e,0x2c,
			0x00,0x01,0x04,0xbc,0xe6,0xa8,0x72,0x20,0x8d,
			0x00,0x01,0x04,0xbd,0x22,0x0e,0x5d,0x20,0x8d,
			0x00,0x01,0x04,0xbd,0xcf,0x2e,0x20,0x20,0x8d,
			0x00,0x01,0x04,0xbe,0xd3,0xcc,0x44,0x20,0x8d,
			0x00,0x01,0x04,0xbf,0xd1,0x15,0xbc,0x20,0x8d,
			0x00,0x01,0x04,0xc0,0x03,0x0b,0x14,0x20,0x8d,
			0x00,0x01,0x04,0xc0,0x03,0xb9,0xd2,0x20,0x8d,
			0x00,0x01,0x04,0xc0,0x41,0xaa,0x0f,0x20,0x8d,
			0x00,0x01,0x04,0xc0,0x41,0xaa,0x32,0x20,0x8d,
			0x00,0x01,0x04,0xc0,0x92,0x89,0x12,0x20,0x8d,
			0x00,0x01,0x04,0xc0,0x9d,0xca,0xb2,0x20,0x8d,
			0x00,0x01,0x04,0xc0,0xe3,0x50,0x53,0x20,0x8d,
			0x00,0x01,0x04,0xc1,0x0a,0xcb,0x17,0x20,0x8e,
			0x00,0x01,0x04,0xc1,0x19,0x06,0xce,0x20,0x8d,
			0x00,0x01,0x04,0xc1,0x2a,0x6e,0x1e,0x20,0x8d,
			0x00,0x01,0x04,0xc1,0x3a,0xc4,0xd4,0x20,0x8d,
			0x00,0x01,0x04,0xc1,0x6a,0x1c,0x08,0x20,0x8d,
			0x00,0x01,0x04,0xc1,0xbd,0xbe,0x7b,0x20,0x8d,
			0x00,0x01,0x04,0xc1,0xc2,0xa3,0x23,0x20,0x8d,
			0x00,0x01,0x04,0xc1,0xc2,0xa3,0x35,0x20,0x8d,
			0x00,0x01,0x04,0xc2,0x0e,0xf6,0xcd,0x20,0x8d,
			0x00,0x01,0x04,0xc2,0x24,0x5b,0xfd,0x20,0x8d,
			0x00,0x01,0x04,0xc2,0x7e,0x71,0x87,0x20,0x8d,
			0x00,0x01,0x04,0xc2,0x87,0x87,0x45,0x20,0x8d,
			0x00,0x01,0x04,0xc3,0x38,0x3f,0x04,0x20,0x8d,
			0x00,0x01,0x04,0xc3,0x38,0x3f,0x05,0x20,0x8d,
			0x00,0x01,0x04,0xc3,0x43,0x8b,0x36,0x20,0x8d,
			0x00,0x01,0x04,0xc3,0x87,0xc2,0x08,0x20,0x8d,
			0x00,0x01,0x04,0xc3,0xca,0xa9,0x95,0x20,0x8d,
			0x00,0x01,0x04,0xc3,0xce,0x69,0x2a,0x20,0x8d,
			0x00,0x01,0x04,0xc3,0xd1,0xf9,0xa4,0x20,0x8d,
			0x00,0x01,0x04,0xc6,0x01,0xe7,0x06,0x20,0x8d,
			0x00,0x01,0x04,0xc6,0xc8,0x2b,0xd7,0x20,0x8d,
			0x00,0x01,0x04,0xc7,0xb6,0xb8,0xcc,0x20,0x8d,
			0x00,0x01,0x04,0xc7,0xf7,0x07,0xd0,0x20,0x8d,
			0x00,0x01,0x04,0xc7,0xf7,0xf9,0xbc,0x20,0x8d,
			0x00,0x01,0x04,0xc8,0x07,0xfc,0x76,0x20,0x8d,
			0x00,0x01,0x04,0xc8,0x14,0xba,0xfe,0x20,0x8d,
			0x00,0x01,0x04,0xc8,0x53,0xa6,0x88,0x20,0x8d,
			0x00,0x01,0x04,0xca,0x37,0x57,0x2d,0x20,0x8d,
			0x00,0x01,0x04,0xca,0x4f,0xa7,0x41,0x20,0x8d,
			0x00,0x01,0x04,0xca,0x6c,0xd3,0x87,0x20,0x8d,
			0x00,0x01,0x04,0xca,0xa9,0x66,0x49,0x20,0x8d,
			0x00,0x01,0x04,0xcb,0x82,0x30,0x75,0x22,0xb5,
			0x00,0x01,0x04,0xcb,0x84,0x5f,0x0a,0x20,0x8d,
			0x00,0x01,0x04,0xcb,0x97,0xa6,0x7b,0x20,0x8d,
			0x00,0x01,0x04,0xcc,0x5d,0x71,0x6c,0x20,0x8d,
			0x00,0x01,0x04,0xcc,0x6f,0xf1,0xc3,0x20,0x8d,
			0x00,0x01,0x04,0xce,0x7c,0x95,0x42,0x20,0x8d,
			0x00,0x01,0x04,0xcf,0x73,0x66,0x62,0x20,0x8d,
			0x00,0x01,0x04,0xcf,0xe5,0x2e,0x96,0x20,0x8d,
			0x00,0x01,0x04,0xd0,0x4c,0xfc,0xc6,0x20,0x8d,
			0x00,0x01,0x04,0xd0,0x64,0x0d,0x38,0x20,0x8d,
			0x00,0x01,0x04,0xd0,0x64,0xb2,0xaf,0x20,0x8d,
			0x00,0x01,0x04,0xd0,0x6e,0x63,0x69,0x20,0x8d,
			0x00,0x01,0x04,0xd1,0x06,0xd2,0xb3,0x20,0x8d,
			0x00,0x01,0x04,0xd1,0x85,0xdc,0x4a,0x20,0x8d,
			0x00,0x01,0x04,0xd1,0x8d,0x39,0x39,0x20,0x8d,
			0x00,0x01,0x04,0xd3,0x1b,0x93,0x43,0x20,0x8d,
			0x00,0x01,0x04,0xd4,0x22,0xe1,0x76,0x20,0x8d,
			0x00,0x01,0x04,0xd4,0x59,0xad,0xd8,0x20,0x8d,
			0x00,0x01,0x04,0xd4,0x63,0xe2,0x24,0x23,0x3c,
			0x00,0x01,0x04,0xd4,0xed,0x60,0x62,0x20,0x8d,
			0x00,0x01,0x04,0xd5,0x59,0x83,0x35,0x20,0x8d,
			0x00,0x01,0x04,0xd8,0x26,0x81,0xa4,0x20,0x8d,
			0x00,0x01,0x04,0xd8,0x86,0xa5,0x37,0x20,0x8d,
			0x00,0x01,0x04,0xd8,0x92,0xfb,0x08,0x20,0x8d,
			0x00,0x01,0x04,0xd8,0xbd,0xbe,0x5f,0x20,0x8d,
			0x00,0x01,0x04,0xd8,0xe2,0x80,0xbd,0x20,0x8d,
			0x00,0x01,0x04,0xd8,0xec,0xa4,0x52,0x20,0x8d,
			0x00,0x01,0x04,0xd9,0x13,0xd8,0xd2,0x20,0x8d,
			0x00,0x01,0x04,0xd9,0x1a,0x20,0x0a,0x20,0x8d,
			0x00,0x01,0x04,0xd9,0x40,0x2f,0x8a,0x20,0x8d,
			0x00,0x01,0x04,0xd9,0x40,0x85,0xdc,0x20,0x8d,
			0x00,0x01,0x04,0xd9,0x5c,0x37,0xf6,0x20,0x8d,
			0x00,0x01,0x04,0xda,0x1f,0x71,0xf5,0x20,0x8d,
			0x00,0x01,0x04,0xda,0xff,0xf2,0x72,0x20,0x8d,
			0x00,0x01,0x04,0xdc,0x85,0x27,0x3d,0x20,0x8d,
			0x00,0x01,0x04,0xdf,0x10,0x1e,0xaf,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x19,0xf0,0x60,0x01,0x30,0x6f,0x0e,0xc4,0x7a,0xff,0xfe,0x8f,0x66,0xec,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x1b,0xc0,0x00,0xcc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x01,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x1c,0x02,0x2f,0x18,0x0d,0x00,0xb6,0x2e,0x99,0xff,0xfe,0x49,0xd4,0x92,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x41,0x00,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x93,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x41,0x00,0x00,0x00,0x00,0x64,0xdc,0xaf,0xaf,0xff,0xfe,0x00,0x67,0x07,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x04,0x70,0x00,0x0a,0x0c,0x13,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x48,0x01,0x78,0x19,0x00,0x74,0xb7,0x45,0xb9,0xd5,0xff,0x10,0xa6,0x1a,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x4b,0xa0,0xff,0xfa,0x00,0x5d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x93,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x06,0x10,0x19,0x08,0xff,0x01,0xf8,0x16,0x3e,0xff,0xfe,0x33,0x2e,0x32,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x06,0x38,0xa0,0x00,0x41,0x40,0x00,0x00,0x00,0x00,0xff,0xff,0x01,0x91,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x06,0x48,0x28,0x00,0x01,0x31,0x4b,0x1f,0xf6,0xfc,0x20,0xf7,0xf9,0x9f,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x06,0x78,0x07,0xdc,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x06,0x78,0x0c,0xc8,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x10,0x00,0x88,0x4e,0x28,
			0x00,0x02,0x10,0x20,0x01,0x06,0x7c,0x12,0x20,0x08,0x0c,0x00,0x00,0x00,0x00,0x93,0xe5,0x0d,0xd2,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x06,0x7c,0x12,0x20,0x08,0x0c,0xe5,0xdc,0xad,0x0c,0x92,0x89,0xc2,0x8f,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x06,0x7c,0x16,0xdc,0x12,0x01,0x50,0x54,0x00,0xff,0xfe,0x17,0x4d,0xac,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x06,0x7c,0x23,0x54,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x06,0x7c,0x26,0xb4,0x00,0x12,0x7a,0xe3,0xb5,0xff,0xfe,0x04,0x6f,0x9c,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x06,0x7c,0x02,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0xfa,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x07,0x18,0x08,0x01,0x03,0x11,0x50,0x54,0x00,0xff,0xfe,0x19,0xc4,0x83,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x08,0xd8,0x08,0x7c,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x99,0x03,0xc1,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x08,0xf1,0x14,0x04,0x37,0x00,0x8e,0x49,0x71,0x5a,0x2e,0x09,0xb6,0x34,0x24,0xe4,
			0x00,0x02,0x10,0x20,0x01,0x0b,0x07,0x5d,0x29,0x99,0xa5,0x19,0x4b,0x38,0x74,0xd6,0x5e,0xa9,0x0d,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x0b,0xa8,0x01,0xf1,0xf0,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x0b,0xc8,0x12,0x00,0x00,0x00,0xda,0xc4,0x97,0xff,0xfe,0x2a,0x35,0x54,0x4e,0x28,
			0x00,0x02,0x10,0x20,0x01,0x0d,0xa8,0x10,0x0d,0x00,0x22,0x10,0xfa,0xd8,0x5f,0x10,0xf2,0x21,0xfd,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x0d,0xa8,0x80,0x01,0x7a,0x39,0xf0,0x35,0x00,0x7d,0xb9,0x9f,0xeb,0x79,0x20,0x8d,
			0x00,0x02,0x10,0x20,0x01,0x0e,0x42,0x01,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x00,0x24,0x12,0x01,0x03,0xc9,0x00,0x08,0x25,0x8f,0x20,0xea,0xff,0x65,0xc2,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x00,0x40,0x52,0x0e,0x20,0x4f,0x00,0x69,0xfe,0xbb,0x33,0x7b,0x1c,0xa1,0xca,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x01,0x18,0x00,0x78,0x00,0x01,0x05,0xbe,0x76,0x4e,0xff,0xfe,0x1c,0x0b,0x35,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x01,0x39,0x00,0x00,0x02,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x01,0xb1,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x01,0x50,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x01,0xd0,0x02,0x44,0x02,0x00,0x00,0x8f,0x28,0x59,0x1a,0x6e,0xa0,0xc6,0x83,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x03,0x62,0x00,0x88,0x21,0x3d,0x68,0x19,0x5b,0x87,0xe9,0x68,0x19,0xd5,0xc8,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x05,0x65,0x80,0x21,0x40,0x3a,0x00,0xc2,0x8c,0x09,0x83,0x36,0x4b,0x5d,0x70,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x05,0x98,0x00,0xb9,0x11,0xa1,0x8a,0x58,0xeb,0xcd,0x3c,0x9d,0x82,0xea,0x4a,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x05,0xaa,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x09,0x00,0x10,0xca,0x20,0x1d,0xf0,0x02,0x24,0xe8,0xff,0xfe,0x1f,0x60,0xd9,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x09,0x8a,0x1e,0xa9,0xaf,0x36,0x60,0x1c,0x5a,0x5b,0x6b,0x8a,0x2d,0x98,0x48,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x09,0x8a,0x1e,0xa9,0xaf,0x36,0x60,0x04,0x04,0x39,0xba,0x88,0xf2,0xe8,0xdf,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x0b,0x00,0x10,0x91,0x41,0x04,0x00,0x49,0xb4,0x3a,0x2e,0x01,0xe5,0x08,0x4c,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x0d,0x00,0x1a,0x07,0x59,0x60,0x00,0xa7,0xb1,0x45,0x1a,0x88,0x74,0xe1,0xac,0x20,0x8d,
			0x00,0x02,0x10,0x24,0x0d,0x00,0x1a,0x07,0x59,0x60,0x00,0xdd,0xab,0x31,0x41,0x4d,0xa0,0x88,0x78,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x00,0x88,0x05,0x24,0x00,0x01,0x4e,0x12,0xdd,0xb1,0xff,0xfe,0xf2,0x30,0x13,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x01,0x06,0x02,0x8d,0x80,0x0b,0x63,0xdc,0x3e,0x24,0xff,0xfe,0x92,0x05,0xeb,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x02,0xff,0xb6,0x00,0x04,0x27,0x98,0xf8,0x16,0x3e,0xff,0xfe,0x2f,0x54,0x41,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x02,0xff,0xb6,0x00,0x04,0x73,0x9e,0xf8,0x16,0x3e,0xff,0xfe,0x00,0xc2,0xb3,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x02,0xff,0xb8,0x00,0x00,0x00,0x00,0x02,0x08,0x00,0x72,0x00,0x57,0x02,0x00,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x04,0x13,0x80,0x41,0x11,0x93,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x04,0x43,0x00,0x00,0x0a,0x00,0x2e,0x02,0x1b,0x21,0xff,0xfe,0x11,0x03,0x92,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x04,0x45,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2e,0x06,0x1f,0xb0,
			0x00,0x02,0x10,0x26,0x04,0x55,0x00,0x70,0x6a,0x40,0x00,0xfc,0x79,0xb9,0xbb,0x01,0xd7,0xc3,0x25,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x04,0x55,0x00,0xc1,0x34,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xfc,0x80,0x1d,
			0x00,0x02,0x10,0x26,0x04,0x68,0x00,0x5e,0x11,0x01,0x62,0x5c,0x8f,0xd2,0xff,0xfe,0x26,0x14,0x6f,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x05,0x4d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x05,0x64,0x00,0x00,0x20,0x13,0xbf,0xdf,0x1d,0x18,0x1c,0x83,0xbb,0x22,0xe8,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x05,0xae,0x00,0x02,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x03,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x05,0xc0,0x00,0x2a,0x0a,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x07,0xf2,0xc0,0xf0,0x0e,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x54,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x07,0xf2,0xf8,0xad,0x40,0x0b,0xc1,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x07,0xf4,0x70,0x00,0x08,0x10,0x48,0xae,0x1f,0x6b,0xff,0xfe,0x70,0x72,0x40,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x07,0xff,0x28,0x80,0x0f,0x00,0x97,0x02,0x25,0x90,0xff,0xfe,0x75,0x11,0x10,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x20,0x01,0x1c,0x50,0x01,0x11,0x18,0xd2,0x67,0xe5,0xff,0xfe,0xe9,0xe6,0x73,0x20,0x8d,
			0x00,0x02,0x10,0x26,0x20,0x00,0x6e,0xa0,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x20,0x8d,
			0x00,0x02,0x10,0x28,0x04,0x01,0x4d,0x4c,0x93,0x98,0x09,0x97,0x69,0xda,0x80,0x18,0x32,0x34,0x80,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0x13,0x28,0xe1,0x01,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x63,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0x13,0x98,0x00,0x04,0x2a,0x03,0x02,0x15,0x5d,0xff,0xfe,0xd6,0x10,0x33,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0x13,0xa0,0x30,0x15,0x00,0x01,0x00,0x85,0x00,0x14,0x00,0x79,0x00,0x26,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0x16,0x30,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0x17,0x68,0x20,0x01,0x00,0x27,0x00,0x00,0x00,0x00,0x00,0x00,0xef,0x6a,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0x18,0x28,0xa0,0x04,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x66,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0x18,0x38,0x00,0x36,0x00,0x17,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0xcb,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0x18,0x38,0x00,0x36,0x00,0x7d,0x00,0x00,0x00,0x00,0x00,0x00,0xd3,0xc6,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0x1c,0x10,0x00,0x02,0x07,0x09,0x58,0xf7,0xe0,0xff,0xfe,0x24,0xa0,0xba,0x56,0xcc,
			0x00,0x02,0x10,0x2a,0x00,0x1c,0x10,0x00,0x02,0x07,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x17,0x56,0xcc,
			0x00,0x02,0x10,0x2a,0x00,0x1f,0x40,0x50,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x31,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0x60,0x20,0x13,0x95,0x14,0x00,0xba,0xf7,0x2d,0x43,0x60,0xb3,0x19,0x8b,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0x7c,0x80,0x00,0x00,0x01,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xaf,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0x8a,0x60,0xe0,0x12,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0xab,0x00,0x06,0x03,0x00,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0xbb,0xe0,0x00,0xcc,0x00,0x00,0x62,0xa4,0x4c,0xff,0xfe,0x23,0x75,0x10,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0x0c,0xa8,0x0a,0x1f,0x30,0x25,0xf9,0x49,0xe4,0x42,0xc9,0x40,0x13,0xe8,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0xd2,0xa0,0x00,0x0a,0x3d,0x00,0x1c,0xdf,0x38,0xbb,0xa7,0xd6,0xc2,0x51,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0xd8,0x80,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x0e,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0x0e,0xc0,0x72,0x07,0x91,0x00,0x5f,0x8f,0x25,0xdd,0x25,0x74,0x39,0x82,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x00,0xf8,0x20,0x04,0x33,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x36,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0x01,0x38,0xa0,0x17,0xb0,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0x04,0x30,0x00,0x17,0x00,0x01,0x00,0x00,0x00,0x00,0xff,0xff,0x11,0x53,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0x04,0x90,0x00,0x16,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0x4b,0x00,0x80,0x7c,0x1b,0x00,0xcd,0xa1,0x0c,0x6a,0x2b,0xad,0x24,0x18,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0x4b,0x00,0x80,0xe7,0x54,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0x04,0xf8,0x01,0x92,0x42,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0xf1,
			0x00,0x02,0x10,0x2a,0x01,0x07,0xa0,0x00,0x02,0x13,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0x07,0xa7,0x00,0x02,0x14,0x67,0x0e,0xc4,0x7a,0xff,0xfe,0xe2,0x56,0x90,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0x07,0xc8,0xd0,0x02,0x01,0x0f,0x50,0x54,0x00,0xff,0xfe,0x5c,0xda,0xc7,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0x07,0xc8,0xd0,0x02,0x03,0x18,0x50,0x54,0x00,0xff,0xfe,0xbe,0xcb,0xb1,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0x87,0x40,0x00,0x01,0xff,0xc5,0x00,0x00,0x00,0x00,0x00,0x00,0x8c,0x6a,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0xcb,0x00,0x0f,0x98,0xca,0x00,0x50,0x54,0x00,0xff,0xfe,0xd4,0x76,0x3d,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0xcb,0x14,0x0c,0xf6,0xbc,0x00,0x21,0xe5,0xf1,0x2e,0x32,0xc8,0x01,0x45,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0x00,0xd0,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x45,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0x00,0xd0,0xbe,0xf2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x01,0x0e,0x35,0x2e,0x40,0x68,0x30,0x02,0x11,0x32,0xff,0xfe,0xa6,0xde,0x3d,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x02,0x12,0x05,0xc6,0xaa,0x60,0xc0,0x70,0xd8,0xaa,0xee,0xa8,0x2d,0x99,0x3c,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x02,0x01,0x69,0x05,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x14,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x02,0x01,0x80,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x5b,0x8f,0x53,0x8c,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x02,0x03,0x48,0x00,0x62,0x5e,0xf7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x02,0x03,0x90,0x90,0x00,0x00,0x00,0x02,0x18,0x7d,0xff,0xfe,0x10,0xbe,0x33,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x02,0x7a,0xa0,0x16,0x19,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0xdc,0x8d,0xe0,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x02,0x7b,0x40,0xb0,0xdf,0x89,0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x02,0x7b,0x40,0xb9,0x05,0x37,0xdb,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x02,0x81,0x0d,0x8c,0xbf,0xf3,0xa8,0x96,0xc6,0x91,0xff,0xfe,0x17,0xae,0x1d,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x02,0x83,0x89,0x01,0xc0,0x96,0x80,0x02,0x01,0x2e,0xff,0xfe,0x82,0xb3,0xcc,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x02,0xa4,0x54,0xa5,0x16,0x00,0x01,0x05,0x17,0x09,0x28,0x7e,0x0d,0x95,0x7c,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x02,0x0a,0xf8,0xfa,0xb0,0x08,0x04,0x01,0x51,0x02,0x36,0x00,0x34,0x01,0x61,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x02,0x0a,0xf8,0xfa,0xb0,0x08,0x08,0x00,0x85,0x02,0x34,0x01,0x45,0x01,0x32,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x02,0x0e,0x00,0xff,0xf0,0x01,0xe2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x03,0x22,0x60,0x30,0x06,0x00,0x0d,0xd3,0x07,0x5d,0x1d,0x32,0xca,0x1f,0xe8,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x03,0x60,0x00,0x08,0x70,0x00,0x00,0x00,0x46,0x00,0x23,0x00,0x87,0x02,0x18,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x03,0x9d,0xa0,0x00,0xf6,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x03,0xc9,0x80,0x00,0xdb,0x00,0x47,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x03,0xe2,0xc0,0x01,0xce,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x04,0x35,0x44,0x10,0x00,0x15,0x10,0x70,0x6c,0xab,0xff,0xfe,0x6c,0x50,0x1c,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x04,0x52,0xc0,0x01,0x01,0x03,0x83,0x00,0x00,0x00,0x00,0x00,0x00,0x2a,0x87,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x04,0x52,0xc0,0x01,0x01,0x03,0xfb,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0x27,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x04,0xee,0x41,0x00,0x83,0x50,0xdf,0xd9,0x08,0xf7,0x1d,0x2a,0x86,0xb3,0x37,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x05,0x6d,0x40,0xb9,0x4e,0xd1,0x00,0x02,0x25,0x90,0xff,0xfe,0x0d,0xcf,0xc2,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x05,0xe5,0xc0,0x00,0x00,0x01,0x00,0x02,0x50,0x56,0xff,0xfe,0xb9,0xd6,0xcb,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x05,0xfc,0x87,0x00,0x01,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x05,0xfc,0x87,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x07,0x57,0x41,0x00,0x00,0x11,0x5d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x07,0xa8,0x80,0x46,0x01,0x10,0x62,0xb4,0xb4,0xbd,0x2a,0x39,0xd4,0x7a,0xcf,0xc8,0xc9,
			0x00,0x02,0x10,0x2a,0x07,0xab,0xc4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x09,0x46,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x07,0xb4,0x00,0x00,0x01,0x03,0x4c,0x00,0x00,0x00,0x00,0x00,0x02,0x10,0x02,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x0a,0x8c,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb4,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x0a,0xc8,0x01,0x00,0x01,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x83,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x0b,0xae,0x40,0x00,0x03,0x4a,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x20,0x8d,
			0x00,0x02,0x10,0x2a,0x0f,0xdf,0x00,0x00,0x00,0x02,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x20,0x8d,
			0x00,0x02,0x10,0x2c,0x0f,0xf5,0x98,0x00,0x05,0x00,0x01,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x8d,
			0x00,0x02,0x10,0x2c,0x0f,0xfc,0xe8,0x00,0x00,0x04,0x00,0x0b,0x7c,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x8d,
			0x00,0x03,0x0a,0xd6,0xbc,0x4a,0x3c,0x6d,0x03,0xa9,0x4e,0x1f,0x55,0x20,0x8d,
			0x00,0x03,0x0a,0xd6,0x8f,0xf0,0xf8,0xbb,0x10,0x00,0x18,0x42,0x54,0x20,0x8d,
			0x00,0x03,0x0a,0xd6,0xec,0x32,0xc1,0x59,0x9c,0xd8,0x46,0xd5,0x48,0x20,0x8d,
			0x00,0x03,0x0a,0xd6,0xf0,0x8d,0x96,0x37,0xc3,0x27,0x61,0x9a,0x24,0x20,0x8d,
			0x00,0x03,0x0a,0xd0,0x12,0xe6,0xed,0x8e,0xc1,0x78,0x8d,0x1c,0x21,0x20,0x8d,
			0x00,0x03,0x0a,0xd0,0x4a,0xc5,0xbd,0x5d,0xe9,0xca,0x57,0xaf,0xc4,0x20,0x8d,
			0x00,0x03,0x0a,0xd0,0x94,0xc0,0x97,0xd2,0x32,0xed,0x81,0x92,0x67,0x20,0x8d,
			0x00,0x03,0x0a,0xd1,0xd5,0x49,0x23,0xa6,0x10,0x01,0x49,0xda,0x05,0x20,0x8d,
			0x00,0x03,0x0a,0xd2,0x2a,0x76,0x2c,0x37,0x09,0x9a,0xa1,0x61,0x4b,0x20,0x8d,
			0x00,0x03,0x0a,0xd3,0x19,0x77,0x50,0xf5,0xf3,0x48,0x17,0x59,0x50,0x20,0x8d,
			0x00,0x03,0x0a,0xd4,0x24,0xda,0xf8,0x97,0x6d,0x28,0x80,0x47,0xf9,0x20,0x8d,
			0x00,0x03,0x0a,0xd4,0x28,0x30,0x9d,0x6d,0xac,0x1e,0xb4,0x6e,0x59,0x20,0x8d,
			0x00,0x03,0x0a,0xd5,0x13,0x71,0x95,0xd5,0x2e,0x12,0xf6,0x0e,0x6e,0x20,0x8d,
			0x00,0x03,0x0a,0xd5,0xc6,0x62,0x50,0xb1,0x22,0xb6,0x4a,0x31,0x56,0x20,0x8d,
			0x00,0x03,0x0a,0xd5,0xc7,0x99,0x46,0x87,0x91,0x13,0xc9,0xc9,0x16,0x20,0x8d,
			0x00,0x03,0x0a,0xdf,0x22,0x06,0xea,0xce,0x87,0x08,0x09,0x32,0x52,0x20,0x8d,
			0x00,0x03,0x0a,0xdf,0xa1,0xf5,0x1c,0xe4,0x4e,0x97,0x71,0xee,0xc5,0x20,0x8d,
			0x00,0x03,0x0a,0xdf,0xf7,0x64,0x8e,0x4f,0xa3,0xbb,0xaa,0x4f,0x30,0x20,0x8d,
			0x00,0x03,0x0a,0xdf,0xfc,0xa5,0x92,0x7d,0xbc,0x03,0x13,0x69,0x35,0x20,0x8d,
			0x00,0x03,0x0a,0xdf,0xd5,0x61,0xfc,0xb7,0x73,0xff,0xef,0x2f,0xaa,0x20,0x8d,
			0x00,0x03,0x0a,0xd9,0x3b,0x3f,0x9e,0x1c,0x02,0xe7,0xd9,0xba,0xb7,0x20,0x8d,
			0x00,0x03,0x0a,0xd9,0x83,0x73,0x90,0x25,0x3b,0xa9,0x4b,0x18,0x5b,0x20,0x8d,
			0x00,0x03,0x0a,0xd9,0xcc,0x14,0xe4,0x9a,0x68,0x6d,0x8a,0x12,0xc5,0x20,0x8d,
			0x00,0x03,0x0a,0xda,0x29,0x4a,0xc4,0x7a,0xb0,0x0e,0x0d,0x0a,0xee,0x20,0x8d,
			0x00,0x03,0x0a,0xda,0x67,0x7a,0x24,0x60,0x45,0x8f,0xe4,0x2e,0x74,0x20,0x8d,
			0x00,0x03,0x0a,0xda,0xfa,0x48,0x68,0x74,0xfb,0x2b,0x21,0x27,0x80,0x20,0x8d,
			0x00,0x03,0x0a,0xdb,0x5c,0x56,0x99,0xb0,0x5c,0x08,0x43,0xb7,0xee,0x20,0x8d,
			0x00,0x03,0x0a,0xdc,0x79,0xc1,0x8f,0x29,0x44,0xf2,0xdc,0x00,0xf6,0x20,0x8d,
			0x00,0x03,0x0a,0xdd,0x66,0x1a,0x59,0x93,0x73,0x7f,0x58,0x76,0x19,0x20,0x8d,
			0x00,0x03,0x0a,0xe7,0x9c,0x7c,0xce,0x79,0xe3,0xc8,0xa4,0x73,0x66,0x20,0x8d,
			0x00,0x03,0x0a,0xe7,0xca,0xbd,0xa2,0xab,0xe5,0x7b,0xe4,0xca,0x71,0x20,0x8d,
			0x00,0x03,0x0a,0xe7,0xd1,0xe8,0x45,0x7a,0x42,0x60,0x2b,0x2c,0xde,0x20,0x8d,
			0x00,0x03,0x0a,0xe7,0xe9,0x47,0x9b,0x22,0x6c,0x6c,0x03,0xba,0x6e,0x20,0x8d,
			0x00,0x03,0x0a,0xe0,0xba,0x25,0x23,0x7f,0x25,0x5c,0x51,0xcb,0xc3,0x20,0x8d,
			0x00,0x03,0x0a,0xe1,0x21,0xbf,0x26,0x37,0xfd,0xe9,0x89,0x95,0xe2,0x20,0x8d,
			0x00,0x03,0x0a,0xe1,0x2c,0xa1,0xde,0xa2,0x37,0x7e,0x01,0xc5,0xa8,0x20,0x8d,
			0x00,0x03,0x0a,0xe1,0x57,0x53,0x20,0x2d,0x66,0x9a,0xb1,0xed,0xa0,0x20,0x8d,
			0x00,0x03,0x0a,0xe2,0x00,0xe6,0xcf,0x0c,0xe7,0xd0,0xc0,0x58,0x9c,0x20,0x8d,
			0x00,0x03,0x0a,0xe2,0x6f,0x9d,0xfd,0xce,0xa7,0x40,0x6f,0xfb,0x62,0x20,0x8d,
			0x00,0x03,0x0a,0xe3,0x1a,0xaa,0xa7,0xc7,0x07,0xf6,0x48,0x34,0x2a,0x20,0x8d,
			0x00,0x03,0x0a,0xe3,0x5b,0x4c,0x5d,0x9d,0x57,0x66,0xbc,0x26,0x1b,0x20,0x8d,
			0x00,0x03,0x0a,0xe3,0x73,0xac,0x1b,0x82,0x6b,0xa6,0x4d,0x91,0x3f,0x20,0x8d,
			0x00,0x03,0x0a,0xe3,0xdd,0x9b,0x1f,0xdd,0xf7,0x30,0x6c,0x8c,0x6a,0x20,0x8d,
			0x00,0x03,0x0a,0xe4,0x0c,0x50,0xf7,0xd1,0xab,0xc2,0xc2,0x4a,0xff,0x20,0x8d,
			0x00,0x03,0x0a,0xe4,0x64,0x0b,0xeb,0x73,0x04,0x33,0x66,0x21,0x89,0x20,0x8d,
			0x00,0x03,0x0a,0xe5,0x3a,0x9e,0x83,0x1e,0x88,0x24,0xeb,0x4f,0x8c,0x20,0x8d,
			0x00,0x03,0x0a,0xe5,0x5d,0x1a,0xcd,0xd8,0x21,0x8f,0xcc,0x86,0xb1,0x20,0x8d,
			0x00,0x03,0x0a,0xee,0xa5,0xc4,0xf5,0xeb,0x1d,0x96,0xfc,0x9e,0x76,0x20,0x8d,
			0x00,0x03,0x0a,0xe8,0x02,0xf4,0x22,0x05,0xa9,0x14,0xe2,0x26,0x2e,0x20,0x8d,
			0x00,0x03,0x0a,0xe8,0x30,0x3c,0xde,0xfe,0x4e,0x1d,0x9d,0xb4,0x99,0x20,0x8d,
			0x00,0x03,0x0a,0xe8,0xaf,0x91,0xca,0x33,0x72,0xba,0x33,0x3b,0x80,0x20,0x8d,
			0x00,0x03,0x0a,0xe9,0x07,0x44,0x29,0xf4,0x1a,0x09,0xb4,0xe2,0x25,0x20,0x8d,
			0x00,0x03,0x0a,0xe9,0x1e,0x40,0x15,0x4c,0xc0,0x38,0x5a,0xf4,0x7d,0x20,0x8d,
			0x00,0x03,0x0a,0xe9,0x71,0x75,0xe6,0x68,0x16,0xe7,0xe6,0xba,0x79,0x20,0x8d,
			0x00,0x03,0x0a,0xe9,0xc7,0xe2,0x60,0x96,0xee,0x02,0xd8,0x78,0xc1,0x20,0x8d,
			0x00,0x03,0x0a,0xea,0x70,0x5c,0x9e,0xca,0x90,0x7d,0x48,0xc5,0xfa,0x20,0x8d,
			0x00,0x03,0x0a,0xeb,0x5c,0xe8,0x18,0x53,0xef,0xbe,0x83,0x77,0xf5,0x20,0x8d,
			0x00,0x03,0x0a,0xeb,0x64,0x56,0x71,0xb0,0x86,0x72,0xf8,0xa6,0x2f,0x20,0x8d,
			0x00,0x03,0x0a,0xeb,0xa1,0x29,0xde,0x4f,0xc9,0xd6,0x64,0x90,0xbe,0x20,0x8d,
			0x00,0x03,0x0a,0xeb,0xf3,0x96,0x0f,0x93,0x2b,0x9b,0x18,0x64,0x3a,0x20,0x8d,
			0x00,0x03,0x0a,0xec,0x84,0xa6,0x5f,0x98,0xa0,0x82,0xd7,0xf1,0x0e,0x20,0x8d,
			0x00,0x03,0x0a,0xed,0x09,0xfb,0x3a,0x39,0x0b,0x7c,0x77,0x37,0x64,0x20,0x8d,
			0x00,0x03,0x0a,0xed,0xae,0x7b,0xea,0x6e,0xcb,0xdd,0x52,0xfb,0x3b,0x20,0x8d,
			0x00,0x03,0x0a,0xed,0xd5,0xbc,0x51,0xbb,0xf1,0x37,0xa2,0x6f,0x88,0x20,0x8d,
			0x00,0x03,0x0a,0xee,0x4c,0x79,0xe8,0xdf,0xa8,0xa4,0x07,0xa3,0xdd,0x20,0x8d,
			0x00,0x03,0x0a,0xf6,0x86,0x21,0xbe,0xa3,0x72,0xcb,0x95,0x0f,0x2b,0x20,0x8d,
			0x00,0x03,0x0a,0xf6,0xc2,0xa7,0x69,0x87,0x45,0xda,0xdd,0x07,0xe3,0x20,0x8d,
			0x00,0x03,0x0a,0xf7,0xce,0x9a,0x96,0xbe,0xb2,0x05,0x30,0x2d,0x9d,0x20,0x8d,
			0x00,0x03,0x0a,0xf1,0xbc,0xa7,0x71,0x4b,0x51,0x7a,0x09,0xac,0x68,0x20,0x8d,
			0x00,0x03,0x0a,0xf2,0xbb,0x98,0x90,0x97,0xb7,0x04,0x01,0xdd,0x1d,0x20,0x8d,
			0x00,0x03,0x0a,0xf2,0x8b,0xd0,0x60,0xeb,0x79,0x1b,0x8b,0x18,0x12,0x20,0x8d,
			0x00,0x03,0x0a,0xf3,0x00,0x83,0x5d,0x35,0x11,0x27,0xc7,0xa2,0x64,0x20,0x8d,
			0x00,0x03,0x0a,0xf4,0x49,0x29,0x57,0x83,0xab,0xd6,0x1e,0xa0,0xe7,0x20,0x8d,
			0x00,0x03,0x0a,0xf4,0x52,0x4b,0xf8,0xd8,0xa0,0x28,0x8d,0x8b,0xa4,0x20,0x8d,
			0x00,0x03,0x0a,0xf4,0x94,0x66,0x97,0x9b,0x7b,0xce,0x3a,0xa6,0x80,0x20,0x8d,
			0x00,0x03,0x0a,0xf4,0xa7,0x70,0x38,0x74,0xb2,0x24,0x6e,0xca,0x07,0x20,0x8d,
			0x00,0x03,0x0a,0xf5,0xe1,0x8e,0x4e,0x5e,0x0b,0xbd,0x4e,0x8c,0xcc,0x20,0x8d,
			0x00,0x03,0x0a,0xf8,0x2a,0xd5,0xec,0x70,0x79,0xa9,0xad,0xa6,0xa0,0x20,0x8d,
			0x00,0x03,0x0a,0xf9,0x4b,0xcb,0x2b,0x5e,0xf3,0x5d,0xad,0xce,0xed,0x20,0x8d,
			0x00,0x03,0x0a,0xf9,0xd0,0xf0,0xd3,0x25,0x18,0xb1,0x98,0x29,0x46,0x20,0x8d,
			0x00,0x03,0x0a,0xfc,0x92,0xc5,0xe6,0x33,0x3a,0x56,0xf2,0xe0,0x6a,0x20,0x8d,
			0x00,0x03,0x0a,0xfc,0xe9,0x3d,0xe6,0x7a,0x02,0xad,0x16,0x5b,0xd7,0x20,0x8d,
			0x00,0x03,0x0a,0xfd,0x0f,0x24,0xe5,0x3e,0x6d,0xf6,0x32,0xb6,0xf3,0x20,0x8d,
			0x00,0x03,0x0a,0xfd,0x99,0xcb,0x49,0xdb,0xb5,0x41,0x3b,0xb4,0x33,0x20,0x8d,
			0x00,0x03,0x0a,0xfe,0x14,0xcc,0xd3,0x01,0xb0,0xf4,0xf9,0xe4,0xdc,0x20,0x8d,
			0x00,0x03,0x0a,0x06,0xbe,0x1a,0x9d,0x0d,0x07,0x31,0xad,0xa6,0xee,0x20,0x8d,
			0x00,0x03,0x0a,0x07,0x77,0x59,0x8d,0x9f,0xa2,0x09,0x3e,0xd4,0x6b,0x20,0x8d,
			0x00,0x03,0x0a,0x07,0x7d,0xdf,0xea,0xe9,0xa3,0x8a,0xd9,0xe8,0x6f,0x20,0x8d,
			0x00,0x03,0x0a,0x00,0x5f,0xae,0xa9,0xa8,0x28,0xe4,0xd1,0x6a,0x35,0x20,0x8d,
			0x00,0x03,0x0a,0x01,0x0b,0x7f,0xd0,0x39,0x78,0x17,0xf1,0x2c,0x0a,0x20,0x8d,
			0x00,0x03,0x0a,0x02,0x3b,0x1d,0x0d,0x0e,0xcb,0x89,0xf8,0xc4,0x79,0x20,0x8d,
			0x00,0x03,0x0a,0x02,0x1f,0x47,0xbc,0xe8,0x9e,0xc8,0xd3,0x19,0xe9,0x20,0x8d,
			0x00,0x03,0x0a,0x02,0xcc,0xf4,0xa7,0x06,0x1e,0xcd,0x36,0xb1,0xef,0x20,0x8d,
			0x00,0x03,0x0a,0x02,0xd0,0x7a,0x03,0xf1,0x3e,0x05,0xce,0xe8,0xf1,0x20,0x8d,
			0x00,0x03,0x0a,0x03,0x36,0x6c,0x60,0xb8,0x6d,0xf3,0x6c,0x5c,0xf7,0x20,0x8d,
			0x00,0x03,0x0a,0x03,0x54,0xec,0xe4,0xa7,0x5e,0xa3,0xba,0x0b,0xd4,0x20,0x8d,
			0x00,0x03,0x0a,0x04,0xf7,0x3b,0x25,0x61,0x98,0xb4,0xb8,0x36,0x1d,0x20,0x8d,
			0x00,0x03,0x0a,0x05,0x60,0xe0,0xaf,0xfa,0x7b,0x05,0xee,0x0f,0x08,0x20,0x8d,
			0x00,0x03,0x0a,0x05,0x98,0x3c,0xe8,0xb2,0xd8,0x7a,0x7e,0xd2,0x7d,0x20,0x8d,
			0x00,0x03,0x0a,0x06,0x31,0x67,0xa3,0x1f,0xf8,0x69,0x31,0xa6,0x29,0x20,0x8d,
			0x00,0x03,0x0a,0x0e,0x91,0xb7,0xa7,0xe2,0xd7,0x05,0x57,0xc6,0x5f,0x20,0x8d,
			0x00,0x03,0x0a,0x0f,0x10,0xb2,0x07,0x17,0x15,0x3c,0xd9,0xcd,0x0e,0x20,0x8d,
			0x00,0x03,0x0a,0x0f,0x2b,0x55,0x06,0x08,0x78,0x98,0xab,0x3f,0x95,0x20,0x8d,
			0x00,0x03,0x0a,0x08,0xc6,0x58,0x5d,0xf2,0xea,0x02,0x3d,0x96,0x76,0x20,0x8d,
			0x00,0x03,0x0a,0x09,0x3a,0x13,0x09,0xee,0xe3,0x9d,0x4b,0xf6,0x18,0x20,0x8d,
			0x00,0x03,0x0a,0x09,0x96,0x0e,0x33,0xd9,0x24,0xeb,0x3a,0xfd,0x72,0x20,0x8d,
			0x00,0x03,0x0a,0x09,0xf7,0xa3,0x66,0xdb,0x6e,0x04,0xac,0xc2,0x93,0x20,0x8d,
			0x00,0x03,0x0a,0x09,0xdd,0xc5,0x38,0x6f,0x21,0xdb,0xfb,0xc7,0x77,0x20,0x8d,
			0x00,0x03,0x0a,0x0a,0x26,0x27,0x21,0xbc,0x8a,0xca,0x0e,0x5a,0x17,0x20,0x8d,
			0x00,0x03,0x0a,0x0a,0x2d,0xf9,0x79,0x25,0xf4,0x74,0xc2,0xec,0x54,0x20,0x8d,
			0x00,0x03,0x0a,0x0a,0xbf,0x87,0xf8,0x8f,0x6b,0x04,0xb5,0xc3,0xfa,0x20,0x8d,
			0x00,0x03,0x0a,0x0a,0xc4,0xa9,0xc4,0xd5,0x27,0x6a,0x49,0xa6,0x4a,0x20,0x8d,
			0x00,0x03,0x0a,0x0a,0xec,0x17,0xfc,0xc5,0x19,0x4a,0x39,0x5f,0x86,0x20,0x8d,
			0x00,0x03,0x0a,0x0b,0x6e,0xdf,0x42,0x02,0xef,0x4d,0x56,0xf5,0xcf,0x20,0x8d,
			0x00,0x03,0x0a,0x0b,0xfe,0xed,0x69,0x75,0x12,0x41,0x62,0x2e,0xb5,0x20,0x8d,
			0x00,0x03,0x0a,0x0c,0x21,0x88,0x50,0x46,0x4f,0x26,0x23,0xb7,0xdc,0x20,0x8d,
			0x00,0x03,0x0a,0x0d,0x47,0x96,0x52,0x62,0x81,0x7e,0x6c,0xe5,0xbd,0x20,0x8d,
			0x00,0x03,0x0a,0x16,0xfd,0x96,0x10,0xc9,0x52,0x1a,0x59,0xb2,0x65,0x20,0x8d,
			0x00,0x03,0x0a,0x17,0x0a,0xdf,0x68,0xcd,0x5c,0xd6,0x68,0xbe,0x75,0x20,0x8d,
			0x00,0x03,0x0a,0x10,0x00,0x45,0xf7,0x04,0x1d,0x50,0xe7,0x43,0x2a,0x20,0x8d,
			0x00,0x03,0x0a,0x10,0x21,0xde,0x00,0x2b,0x28,0x62,0xda,0x30,0x63,0x20,0x8d,
			0x00,0x03,0x0a,0x11,0x22,0xd8,0xb2,0x2a,0xee,0x5c,0xcc,0xbb,0x2d,0x20,0x8d,
			0x00,0x03,0x0a,0x11,0xe2,0x8f,0x22,0x66,0x48,0x00,0x67,0x17,0x93,0x20,0x8d,
			0x00,0x03,0x0a,0x13,0x45,0x64,0x2b,0x73,0x68,0xf4,0x44,0xb3,0xb9,0x20,0x8d,
			0x00,0x03,0x0a,0x15,0x30,0x98,0x3b,0x28,0x23,0x04,0xcb,0x02,0xeb,0x20,0x8d,
			0x00,0x03,0x0a,0x15,0xff,0x00,0x68,0xcf,0x86,0x1f,0xf7,0xac,0x7d,0x20,0x8d,
			0x00,0x03,0x0a,0x16,0x5f,0xfb,0x18,0x14,0x97,0x0d,0x54,0x3b,0xfa,0x20,0x8d,
			0x00,0x03,0x0a,0x1e,0x8a,0xde,0xf2,0x25,0xc2,0x46,0x06,0x99,0x1c,0x20,0x8d,
			0x00,0x03,0x0a,0x1e,0xa4,0xae,0x76,0x9e,0x10,0x3d,0xcc,0x12,0x07,0x20,0x8d,
			0x00,0x03,0x0a,0x1e,0xc0,0xeb,0x31,0xa6,0xaa,0xa7,0x2c,0xa0,0x04,0x20,0x8d,
			0x00,0x03,0x0a,0x1f,0x51,0x4e,0x01,0x19,0xde,0x34,0xa3,0x08,0xc9,0x20,0x8d,
			0x00,0x03,0x0a,0x1f,0xb2,0x1b,0x6a,0x57,0x6d,0xcc,0x9e,0xca,0xbb,0x20,0x8d,
			0x00,0x03,0x0a,0x18,0x7b,0x11,0xf4,0x9c,0xf4,0xfe,0xc3,0x21,0xa8,0x20,0x8d,
			0x00,0x03,0x0a,0x18,0x91,0xa3,0x51,0x6e,0x8a,0xf9,0xcc,0x27,0xbd,0x20,0x8d,
			0x00,0x03,0x0a,0x18,0xdf,0x33,0xe9,0x96,0x9e,0xe3,0x2a,0xb9,0xc6,0x20,0x8d,
			0x00,0x03,0x0a,0x19,0x63,0x6c,0x83,0xe5,0x11,0x04,0xa6,0xb5,0x92,0x20,0x8d,
			0x00,0x03,0x0a,0x1a,0x6c,0x74,0x95,0x3c,0x89,0xf6,0xec,0xef,0x09,0x20,0x8d,
			0x00,0x03,0x0a,0x1a,0x95,0xd6,0x31,0xe4,0xea,0x66,0x97,0x0d,0x5d,0x20,0x8d,
			0x00,0x03,0x0a,0x1b,0x93,0xbc,0x99,0x92,0x0e,0x69,0x16,0x40,0xcf,0x20,0x8d,
			0x00,0x03,0x0a,0x1b,0xc4,0x4e,0x17,0x71,0x14,0x06,0x3c,0x86,0xfd,0x20,0x8d,
			0x00,0x03,0x0a,0x1c,0x6c,0xed,0xd5,0xb7,0x11,0xfa,0xec,0x94,0x2e,0x20,0x8d,
			0x00,0x03,0x0a,0x1d,0x10,0xa5,0x20,0x77,0x43,0xf6,0xbc,0x12,0xed,0x20,0x8d,
			0x00,0x03,0x0a,0x1d,0x20,0x35,0xa1,0xf3,0x16,0xb4,0x8f,0x1c,0xbd,0x20,0x8d,
			0x00,0x03,0x0a,0x1d,0x30,0xfe,0x09,0xc7,0xe8,0xfe,0xd3,0xee,0x83,0x20,0x8d,
			0x00,0x03,0x0a,0x1d,0x33,0xd9,0xd9,0xdb,0xcf,0xc5,0xde,0xae,0xe9,0x20,0x8d,
			0x00,0x03,0x0a,0x1d,0x69,0xe1,0xac,0x11,0xf1,0x32,0x2f,0x5c,0x8d,0x20,0x8d,
			0x00,0x03,0x0a,0x1e,0x3d,0x98,0x4b,0x9e,0xc0,0x96,0x40,0x63,0x0f,0x20,0x8d,
			0x00,0x03,0x0a,0x1e,0x75,0x81,0xb1,0x3b,0xc4,0x22,0x26,0x72,0x3f,0x20,0x8d,
			0x00,0x03,0x0a,0x26,0x83,0xa0,0x76,0x54,0xa8,0xc1,0x6c,0xde,0x83,0x20,0x8d,
			0x00,0x03,0x0a,0x26,0xf6,0x7e,0xfd,0x3a,0x25,0x94,0xa8,0x49,0xbd,0x20,0x8d,
			0x00,0x03,0x0a,0x27,0x54,0x94,0x03,0x1f,0x7e,0x53,0xd8,0x3f,0x35,0x20,0x8d,
			0x00,0x03,0x0a,0x27,0xd0,0xa7,0x73,0x43,0xd5,0xb2,0x26,0x57,0x1c,0x20,0x8d,
			0x00,0x03,0x0a,0x20,0x3c,0x17,0x1f,0x8a,0x74,0xe1,0xdf,0x5a,0x5d,0x20,0x8d,
			0x00,0x03,0x0a,0x21,0x47,0x7f,0x18,0x5c,0x97,0x49,0x9c,0x40,0x86,0x20,0x8d,
			0x00,0x03,0x0a,0x21,0x62,0xfa,0x51,0x02,0xf5,0x14,0x4c,0x40,0x52,0x20,0x8d,
			0x00,0x03,0x0a,0x21,0xa3,0x41,0x6c,0x28,0xda,0x27,0x1a,0x78,0xd0,0x20,0x8d,
			0x00,0x03,0x0a,0x24,0x45,0xe9,0xa6,0x5a,0xa0,0xb0,0x01,0xaf,0x5b,0x20,0x8d,
			0x00,0x03,0x0a,0x25,0x09,0xa6,0xf6,0x4a,0xec,0xd5,0x33,0x74,0x35,0x20,0x8d,
			0x00,0x03,0x0a,0x26,0x55,0x1f,0xca,0x70,0xe5,0xbe,0xe3,0xa6,0x33,0x20,0x8d,
			0x00,0x03,0x0a,0x2e,0xdb,0x8c,0x24,0x20,0xf2,0x9f,0x7c,0xb4,0xea,0x20,0x8d,
			0x00,0x03,0x0a,0x28,0x21,0xfd,0xd5,0x3c,0x78,0xa5,0xfd,0xcc,0xf4,0x20,0x8d,
			0x00,0x03,0x0a,0x28,0xeb,0x35,0xa7,0x6f,0x90,0x83,0x7a,0x1f,0xfd,0x20,0x8d,
			0x00,0x03,0x0a,0x29,0x86,0xfb,0xba,0xbc,0x6e,0x6f,0x53,0x89,0xf5,0x20,0x8d,
			0x00,0x03,0x0a,0x2a,0x25,0x08,0x7a,0xb9,0x56,0xd9,0xe9,0xeb,0x5d,0x20,0x8d,
			0x00,0x03,0x0a,0x2a,0x8c,0xfd,0xc2,0xc4,0x30,0x05,0x11,0xe8,0x29,0x20,0x8d,
			0x00,0x03,0x0a,0x2b,0xb7,0x31,0x96,0xd7,0xd7,0xe6,0x05,0x42,0x1d,0x20,0x8d,
			0x00,0x03,0x0a,0x2c,0x15,0x79,0x88,0xf6,0xc3,0xd1,0x27,0xa9,0xf5,0x20,0x8d,
			0x00,0x03,0x0a,0x2c,0x28,0xda,0x1d,0x76,0xa8,0xff,0x18,0x78,0x7d,0x20,0x8d,
			0x00,0x03,0x0a,0x2c,0x6d,0x3e,0xb2,0x42,0x7e,0x0e,0x8a,0x59,0xe4,0x20,0x8d,
			0x00,0x03,0x0a,0x2c,0xc1,0xc3,0x15,0x28,0xa5,0x7c,0x5d,0x2c,0x9a,0x20,0x8d,
			0x00,0x03,0x0a,0x2d,0x1d,0x8d,0x21,0xf4,0x84,0x61,0x62,0x74,0x45,0x20,0x8d,
			0x00,0x03,0x0a,0x2e,0x7c,0xd9,0x21,0x3e,0x4a,0x31,0x4b,0x2e,0x42,0x20,0x8d,
			0x00,0x03,0x0a,0x36,0xea,0xb6,0x80,0x00,0x71,0xbb,0x23,0x51,0x1d,0x20,0x8d,
			0x00,0x03,0x0a,0x37,0x38,0x8f,0x26,0xd2,0xa4,0xd5,0x66,0x49,0xf9,0x20,0x8d,
			0x00,0x03,0x0a,0x37,0x7b,0x3f,0x74,0x7d,0x12,0x92,0x8b,0x89,0xb6,0x20,0x8d,
			0x00,0x03,0x0a,0x30,0x12,0x3f,0x13,0x11,0x5e,0xa1,0x65,0x15,0x86,0x20,0x8d,
			0x00,0x03,0x0a,0x30,0x57,0x42,0x6c,0xf1,0xee,0xdf,0xc3,0x46,0xff,0x20,0x8d,
			0x00,0x03,0x0a,0x30,0x5f,0x17,0x76,0x79,0x1d,0x11,0x42,0x97,0x95,0x20,0x8d,
			0x00,0x03,0x0a,0x30,0xb8,0xbd,0xce,0x0b,0xde,0xa0,0x72,0x99,0x88,0x20,0x8d,
			0x00,0x03,0x0a,0x30,0x9a,0xb7,0x46,0xb3,0x7e,0x05,0x40,0x24,0x5e,0x20,0x8d,
			0x00,0x03,0x0a,0x30,0xe4,0x80,0xe9,0xaa,0xd1,0x08,0xe4,0x0c,0xc2,0x20,0x8d,
			0x00,0x03,0x0a,0x31,0x3a,0x66,0x7c,0x5e,0xb7,0xf0,0x03,0xbf,0x3f,0x20,0x8d,
			0x00,0x03,0x0a,0x31,0x0c,0x29,0x90,0x84,0x7f,0x05,0x62,0xcd,0x7d,0x20,0x8d,
			0x00,0x03,0x0a,0x31,0x5d,0x88,0x82,0x83,0x35,0x7b,0x04,0x8d,0x54,0x20,0x8d,
			0x00,0x03,0x0a,0x31,0x9e,0x1a,0x61,0xec,0xb9,0x91,0xaf,0x2c,0x5e,0x20,0x8d,
			0x00,0x03,0x0a,0x31,0xe0,0x8a,0xe0,0x9f,0x11,0x44,0xa4,0x49,0xb3,0x20,0x8d,
			0x00,0x03,0x0a,0x32,0x22,0x05,0x5d,0xcc,0x69,0x3a,0x50,0xe3,0xdc,0x20,0x8d,
			0x00,0x03,0x0a,0x32,0xf3,0xd3,0x15,0x5b,0xdc,0xe9,0x43,0x75,0xa4,0x20,0x8d,
			0x00,0x03,0x0a,0x33,0xd6,0x09,0xdd,0xd8,0x37,0x5b,0x75,0xf6,0x29,0x20,0x8d,
			0x00,0x03,0x0a,0x34,0x50,0xf5,0xf6,0xe9,0xb6,0x34,0x31,0x47,0xc2,0x20,0x8d,
			0x00,0x03,0x0a,0x34,0xce,0x7c,0xad,0x90,0x12,0x35,0xa6,0xde,0x34,0x20,0x8d,
			0x00,0x03,0x0a,0x34,0xdd,0xa1,0xfb,0x92,0xb3,0xa4,0x56,0x2b,0xc2,0x20,0x8d,
			0x00,0x03,0x0a,0x35,0x00,0x24,0x34,0x98,0xee,0x98,0x61,0x05,0xfa,0x20,0x8d,
			0x00,0x03,0x0a,0x35,0x95,0x33,0x45,0x93,0xb2,0xbc,0xda,0xf6,0x42,0x20,0x8d,
			0x00,0x03,0x0a,0x35,0x9d,0x76,0xb9,0x43,0x15,0x85,0xf3,0xe3,0x8f,0x20,0x8d,
			0x00,0x03,0x0a,0x3e,0xf7,0xb2,0xf2,0x0d,0xb1,0x3e,0xc8,0xe1,0x8d,0x20,0x8d,
			0x00,0x03,0x0a,0x3f,0x81,0xbd,0x37,0x81,0x58,0x6d,0x6c,0x37,0x83,0x20,0x8d,
			0x00,0x03,0x0a,0x38,0x0b,0x69,0xc4,0x2e,0x74,0xb2,0xe2,0x30,0x2c,0x20,0x8d,
			0x00,0x03,0x0a,0x38,0x6c,0x73,0x48,0x3b,0x21,0x10,0xd6,0xc7,0xd3,0x20,0x8d,
			0x00,0x03,0x0a,0x38,0xab,0xe2,0xba,0xe7,0xeb,0x15,0xf2,0x9c,0x3d,0x20,0x8d,
			0x00,0x03,0x0a,0x38,0xfc,0x75,0x4c,0x4b,0xf5,0x80,0xcc,0xaf,0x2c,0x20,0x8d,
			0x00,0x03,0x0a,0x38,0xc1,0xe6,0x48,0x1c,0xaf,0x23,0x3f,0xfc,0xd7,0x20,0x8d,
			0x00,0x03,0x0a,0x38,0xcc,0xdb,0xaa,0x90,0x90,0xfd,0x64,0xda,0xd7,0x20,0x8d,
			0x00,0x03,0x0a,0x39,0x8f,0xb0,0x65,0xbb,0x21,0x24,0x31,0xd4,0x46,0x20,0x8d,
			0x00,0x03,0x0a,0x39,0xf1,0x7a,0x78,0x36,0x52,0x48,0x52,0x25,0xd9,0x20,0x8d,
			0x00,0x03,0x0a,0x3a,0x32,0xdf,0x45,0x8e,0x2c,0x8d,0xba,0x3d,0x8d,0x20,0x8d,
			0x00,0x03,0x0a,0x3a,0x61,0x7b,0xcb,0x1a,0x74,0x88,0xc2,0xd4,0x95,0x20,0x8d,
			0x00,0x03,0x0a,0x3a,0x82,0xff,0xb0,0x26,0xb7,0x94,0xb5,0xcb,0x92,0x20,0x8d,
			0x00,0x03,0x0a,0x3a,0xdc,0x9a,0x59,0x16,0x0a,0x9c,0x9e,0x28,0x79,0x20,0x8d,
			0x00,0x03,0x0a,0x3a,0xf3,0x79,0x26,0x3f,0x70,0x77,0x0c,0xe6,0x10,0x20,0x8d,
			0x00,0x03,0x0a,0x3b,0x51,0x4c,0xbd,0x64,0xc9,0x03,0x83,0xd7,0xe0,0x20,0x8d,
			0x00,0x03,0x0a,0x3b,0x9a,0x32,0x59,0x49,0xe4,0xb9,0x11,0x8a,0xc5,0x20,0x8d,
			0x00,0x03,0x0a,0x3c,0x17,0xd6,0xd7,0xd5,0x38,0x88,0x81,0xec,0x2d,0x20,0x8d,
			0x00,0x03,0x0a,0x3c,0x9e,0x97,0x7d,0x90,0x8c,0x49,0xd3,0x62,0xf1,0x20,0x8d,
			0x00,0x03,0x0a,0x3d,0x3d,0xc9,0x69,0x83,0x8e,0xef,0xfc,0x5d,0x40,0x20,0x8d,
			0x00,0x03,0x0a,0x3d,0x6d,0x58,0x6a,0x56,0x54,0x2d,0xb8,0x57,0x0e,0x20,0x8d,
			0x00,0x03,0x0a,0x3d,0x9d,0xa0,0xa3,0x0d,0x1c,0x63,0x57,0xaf,0xc5,0x20,0x8d,
			0x00,0x03,0x0a,0x3e,0x6e,0x9d,0x8e,0x67,0xde,0x35,0x79,0xf3,0xae,0x20,0x8d,
			0x00,0x03,0x0a,0x46,0xe8,0x5b,0xd2,0xdb,0x9f,0xc5,0x72,0x8d,0xf0,0x20,0x8d,
			0x00,0x03,0x0a,0x40,0x36,0xdd,0xc3,0xb4,0xe7,0x4d,0x57,0xdf,0xe0,0x20,0x8d,
			0x00,0x03,0x0a,0x40,0x8a,0x69,0x6c,0xa2,0x98,0x94,0x3e,0x60,0x8e,0x20,0x8d,
			0x00,0x03,0x0a,0x40,0x9f,0x9f,0x4c,0xf0,0xa8,0xd2,0x2b,0x2e,0xa1,0x20,0x8d,
			0x00,0x03,0x0a,0x41,0x77,0xac,0xbb,0xb4,0xe3,0x0e,0x3a,0x34,0xa3,0x20,0x8d,
			0x00,0x03,0x0a,0x41,0xb8,0xb3,0x52,0x0b,0xf5,0x6e,0xa0,0xb1,0x91,0x20,0x8d,
			0x00,0x03,0x0a,0x41,0xce,0x28,0xfc,0xa7,0x16,0x60,0x30,0x0b,0x98,0x20,0x8d,
			0x00,0x03,0x0a,0x42,0x59,0xa9,0xe2,0xee,0x0f,0xea,0xaa,0x83,0x39,0x20,0x8d,
			0x00,0x03,0x0a,0x43,0xf6,0xfa,0x52,0x06,0x3d,0x18,0x5c,0xf6,0xd6,0x20,0x8d,
			0x00,0x03,0x0a,0x44,0x36,0xa2,0x4f,0xfa,0x2e,0xf1,0xa2,0xc5,0xe6,0x20,0x8d,
			0x00,0x03,0x0a,0x44,0x00,0x69,0xf4,0x4e,0xe0,0xe7,0xf3,0xf8,0xe5,0x20,0x8d,
			0x00,0x03,0x0a,0x45,0x0d,0x6e,0x69,0x07,0xf1,0xdf,0x18,0x47,0x5e,0x20,0x8d,
			0x00,0x03,0x0a,0x45,0x4b,0xff,0xf2,0xbc,0x9f,0xd5,0xed,0xa3,0xc3,0x20,0x8d,
			0x00,0x03,0x0a,0x45,0x4a,0x01,0x0c,0xbf,0x12,0x0d,0xac,0xeb,0x1a,0x20,0x8d,
			0x00,0x03,0x0a,0x45,0x65,0x71,0xd9,0x54,0xeb,0x8d,0xac,0xa7,0x8b,0x20,0x8d,
			0x00,0x03,0x0a,0x45,0xec,0x68,0x9c,0x0a,0x5d,0x69,0xc3,0x79,0xdf,0x20,0x8d,
			0x00,0x03,0x0a,0x46,0x7b,0xe6,0x39,0xde,0x62,0x9f,0xb3,0x7e,0xee,0x20,0x8d,
			0x00,0x03,0x0a,0x4e,0x84,0xfe,0xb2,0x96,0xea,0x76,0xba,0x30,0x57,0x20,0x8d,
			0x00,0x03,0x0a,0x4e,0x97,0x15,0x46,0xd4,0x32,0xc7,0x62,0x5a,0xd2,0x20,0x8d,
			0x00,0x03,0x0a,0x4e,0xa1,0x36,0x28,0x7a,0x18,0x02,0xb9,0x4b,0x3c,0x20,0x8d,
			0x00,0x03,0x0a,0x4f,0x49,0xac,0x50,0x0d,0xef,0xeb,0xa3,0xf4,0x8b,0x20,0x8d,
			0x00,0x03,0x0a,0x4f,0x52,0x58,0x8e,0x67,0x84,0xfa,0x6d,0x76,0xf9,0x20,0x8d,
			0x00,0x03,0x0a,0x4f,0x56,0xad,0x52,0xba,0x0c,0x9e,0x58,0x5c,0xaa,0x20,0x8d,
			0x00,0x03,0x0a,0x48,0x1b,0x5a,0xe6,0x4c,0xc8,0xa4,0x9d,0x95,0x0b,0x20,0x8d,
			0x00,0x03,0x0a,0x49,0x1a,0xdd,0x4d,0x98,0x5e,0xef,0x70,0x45,0x90,0x20,0x8d,
			0x00,0x03,0x0a,0x49,0x5c,0x4e,0x97,0x52,0x16,0x5c,0x92,0xbf,0x7a,0x20,0x8d,
			0x00,0x03,0x0a,0x49,0x84,0x64,0x79,0x5a,0x7d,0xdc,0xe4,0x76,0x1b,0x20,0x8d,
			0x00,0x03,0x0a,0x49,0xc0,0xd0,0x6b,0x92,0xd8,0xf2,0xa4,0x4f,0x2f,0x20,0x8d,
			0x00,0x03,0x0a,0x4a,0x26,0x6a,0x2c,0x3a,0xe3,0x2a,0x58,0x44,0x66,0x20,0x8d,
			0x00,0x03,0x0a,0x4a,0x69,0x5b,0x05,0x25,0xca,0xd2,0xc6,0xfe,0x7b,0x20,0x8d,
			0x00,0x03,0x0a,0x4a,0xc4,0x57,0x30,0xd1,0xed,0xca,0x4b,0x81,0x05,0x20,0x8d,
			0x00,0x03,0x0a,0x4a,0xc8,0x79,0x7b,0x01,0x0e,0xbd,0x05,0xb5,0xa0,0x20,0x8d,
			0x00,0x03,0x0a,0x4a,0xd3,0x9c,0xf2,0x6c,0x0c,0x23,0x78,0x6e,0x1d,0x20,0x8d,
			0x00,0x03,0x0a,0x4b,0x85,0xc7,0x40,0x44,0x20,0xd4,0x6f,0xfe,0xa5,0x20,0x8d,
			0x00,0x03,0x0a,0x4c,0x7b,0x8f,0x35,0x34,0x08,0x83,0x5f,0x1b,0x7f,0x20,0x8d,
			0x00,0x03,0x0a,0x4c,0x5c,0x07,0x4b,0xcb,0x07,0x2a,0x82,0x1d,0xdc,0x20,0x8d,
			0x00,0x03,0x0a,0x4c,0x98,0xf3,0x99,0x40,0xc7,0xd0,0x83,0x85,0x51,0x20,0x8d,
			0x00,0x03,0x0a,0x4c,0xd5,0x26,0xb9,0x54,0x90,0x72,0xc9,0x7e,0xcb,0x20,0x8d,
			0x00,0x03,0x0a,0x4d,0x3a,0x3a,0x3b,0x71,0xf3,0xfc,0x34,0x65,0xa2,0x20,0x8d,
			0x00,0x03,0x0a,0x4d,0xbd,0x9c,0x32,0xe2,0x69,0x02,0x03,0xd2,0x89,0x20,0x8d,
			0x00,0x03,0x0a,0x4d,0xc0,0xba,0x9c,0xbf,0xb7,0xec,0x4a,0xc3,0x36,0x20,0x8d,
			0x00,0x03,0x0a,0x4e,0x32,0x72,0x6d,0x06,0xe7,0x10,0x25,0x62,0x41,0x20,0x8d,
			0x00,0x03,0x0a,0x4e,0x49,0xea,0x29,0xbc,0x40,0xe2,0x7e,0x70,0x8e,0x20,0x8d,
			0x00,0x03,0x0a,0x57,0x0c,0xb7,0x4d,0x77,0x6b,0x27,0x30,0xf8,0x53,0x20,0x8d,
			0x00,0x03,0x0a,0x57,0xe9,0x8d,0xa2,0xcc,0xa9,0xa9,0x9c,0x18,0x7a,0x20,0x8d,
			0x00,0x03,0x0a,0x52,0xf5,0xb7,0x14,0x06,0xdd,0x14,0x1f,0x1e,0xeb,0x20,0x8d,
			0x00,0x03,0x0a,0x53,0x95,0x3d,0x42,0x3e,0x1f,0x1e,0xcc,0x07,0x43,0x20,0x8d,
			0x00,0x03,0x0a,0x53,0xc0,0xba,0x6c,0xfd,0xc0,0xd4,0xe0,0x22,0xb2,0x20,0x8d,
			0x00,0x03,0x0a,0x54,0x46,0xf0,0x8e,0xb3,0x85,0xba,0x2e,0xac,0x84,0x20,0x8d,
			0x00,0x03,0x0a,0x54,0x51,0x6f,0x2b,0x29,0xc8,0x23,0x93,0x07,0x66,0x20,0x8d,
			0x00,0x03,0x0a,0x54,0x5f,0xa9,0x9c,0x4c,0xb4,0x5f,0x27,0x50,0x9e,0x20,0x8d,
			0x00,0x03,0x0a,0x55,0x71,0x51,0xd9,0x36,0x98,0x09,0xd6,0x3b,0xff,0x20,0x8d,
			0x00,0x03,0x0a,0x56,0x23,0x78,0xa3,0xb1,0x0c,0x7c,0x87,0xd2,0x32,0x20,0x8d,
			0x00,0x03,0x0a,0x56,0x76,0xeb,0x9b,0xff,0xe7,0x47,0x79,0xfb,0x50,0x20,0x8d,
			0x00,0x03,0x0a,0x5e,0xed,0xd2,0x89,0x48,0xd5,0x83,0x17,0x6a,0x01,0x20,0x8d,
			0x00,0x03,0x0a,0x5f,0x38,0x14,0x4a,0x97,0x39,0xff,0x12,0x07,0xb0,0x20,0x8d,
			0x00,0x03,0x0a,0x5f,0x7d,0xd3,0x77,0x5b,0x23,0x12,0x40,0xd2,0x49,0x20,0x8d,
			0x00,0x03,0x0a,0x5f,0xad,0xd5,0x0c,0x88,0x35,0xa4,0x66,0x97,0xb3,0x20,0x8d,
			0x00,0x03,0x0a,0x5f,0xc1,0xc2,0x32,0x38,0x2d,0xd4,0x93,0x31,0x81,0x20,0x8d,
			0x00,0x03,0x0a,0x5f,0xe4,0xb7,0x48,0x49,0x84,0x02,0x82,0x8a,0x56,0x20,0x8d,
			0x00,0x03,0x0a,0x58,0x00,0x54,0xc2,0xb3,0x71,0xbe,0x34,0x95,0x7a,0x20,0x8d,
			0x00,0x03,0x0a,0x58,0x0f,0xef,0xf9,0x57,0x09,0x82,0x6b,0x6e,0x9a,0x20,0x8d,
			0x00,0x03,0x0a,0x58,0x61,0xa0,0x7d,0xed,0x7b,0x2a,0x8b,0x6a,0x0e,0x20,0x8d,
			0x00,0x03,0x0a,0x58,0xb9,0x66,0xbe,0x0b,0xd7,0xeb,0x86,0x23,0x7d,0x20,0x8d,
			0x00,0x03,0x0a,0x58,0xdc,0x52,0x84,0xaf,0x56,0xd3,0xe1,0x7f,0x1f,0x20,0x8d,
			0x00,0x03,0x0a,0x59,0x0e,0xf6,0x19,0x6a,0x45,0x5c,0x18,0x6a,0x0e,0x20,0x8d,
			0x00,0x03,0x0a,0x59,0x89,0x67,0xa7,0x3f,0x41,0x3e,0x30,0x42,0x11,0x20,0x8d,
			0x00,0x03,0x0a,0x59,0x95,0x50,0xd6,0x2e,0xf7,0xd2,0xe6,0x3a,0x56,0x20,0x8d,
			0x00,0x03,0x0a,0x5a,0x2d,0xdc,0xf1,0xa6,0x40,0xbc,0x1f,0xd5,0xb5,0x20,0x8d,
			0x00,0x03,0x0a,0x5a,0x65,0xf3,0x5a,0x2c,0x66,0x41,0xe8,0x78,0xc0,0x20,0x8d,
			0x00,0x03,0x0a,0x5b,0x2a,0x0b,0xec,0x9e,0x05,0x81,0x7a,0x9e,0x08,0x20,0x8d,
			0x00,0x03,0x0a,0x5c,0x73,0xff,0x8e,0xc5,0xfe,0x21,0xc1,0x19,0xb3,0x20,0x8d,
			0x00,0x03,0x0a,0x5d,0x41,0xde,0x3d,0xa1,0x86,0x9b,0x26,0x27,0x11,0x20,0x8d,
			0x00,0x03,0x0a,0x5d,0xc5,0xaa,0x3c,0xf7,0xc6,0x2e,0x55,0x9d,0xa5,0x20,0x8d,
			0x00,0x03,0x0a,0x5e,0x13,0x80,0x8e,0x3c,0x3b,0x13,0xb0,0xc0,0x01,0x20,0x8d,
			0x00,0x03,0x0a,0x5e,0x75,0x95,0xb5,0x98,0xc3,0x6d,0x33,0x58,0xba,0x20,0x8d,
			0x00,0x03,0x0a,0x67,0x8e,0x26,0xbd,0x0a,0x43,0x30,0x7d,0xff,0x0f,0x20,0x8d,
			0x00,0x03,0x0a,0x60,0xfd,0xbe,0xb9,0x89,0x6c,0x4c,0x72,0x10,0x7b,0x20,0x8d,
			0x00,0x03,0x0a,0x60,0xc3,0xb7,0x51,0xf6,0x2f,0x0b,0xa8,0x61,0x21,0x20,0x8d,
			0x00,0x03,0x0a,0x61,0x3c,0x3e,0x12,0x57,0xfb,0x8e,0x36,0xdd,0xa4,0x20,0x8d,
			0x00,0x03,0x0a,0x61,0x04,0x55,0x21,0x5d,0x12,0x39,0xfb,0x09,0x49,0x20,0x8d,
			0x00,0x03,0x0a,0x61,0x63,0x52,0x55,0xbf,0xb7,0xa3,0x69,0x3f,0x91,0x20,0x8d,
			0x00,0x03,0x0a,0x62,0x19,0x4a,0x4d,0x64,0xb7,0x65,0x19,0x8e,0x8a,0x20,0x8d,
			0x00,0x03,0x0a,0x63,0x71,0x25,0x6d,0x19,0xbd,0x62,0x0d,0x9e,0x95,0x20,0x8d,
			0x00,0x03,0x0a,0x64,0x29,0xe3,0x42,0x71,0x3b,0x3d,0x7c,0xda,0xc7,0x20,0x8d,
			0x00,0x03,0x0a,0x65,0xa8,0x2f,0x55,0xcc,0xe3,0x4c,0x84,0xcc,0x3b,0x20,0x8d,
			0x00,0x03,0x0a,0x65,0xc7,0x38,0xa4,0xe4,0xd6,0x0b,0x2b,0xed,0xe6,0x20,0x8d,
			0x00,0x03,0x0a,0x6f,0x10,0x12,0x4f,0x8f,0x44,0x85,0x5d,0x69,0xa9,0x20,0x8d,
			0x00,0x03,0x0a,0x6f,0x87,0xcf,0x54,0x39,0xbf,0x36,0x12,0x55,0x61,0x20,0x8d,
			0x00,0x03,0x0a,0x6f,0xa7,0xe5,0x14,0xd9,0x5d,0x5d,0x9b,0x9c,0xac,0x20,0x8d,
			0x00,0x03,0x0a,0x6f,0xe3,0x17,0x08,0xf6,0x24,0x4b,0xa8,0x5f,0x24,0x20,0x8d,
			0x00,0x03,0x0a,0x68,0xa4,0x34,0x41,0x8d,0xb9,0xda,0xd4,0x86,0x59,0x20,0x8d,
			0x00,0x03,0x0a,0x6a,0x27,0x7b,0x6d,0x0b,0x29,0x5a,0x67,0xd1,0x95,0x20,0x8d,
			0x00,0x03,0x0a,0x6a,0x57,0x2a,0xd0,0x28,0x58,0xc8,0x75,0xd2,0xd1,0x20,0x8d,
			0x00,0x03,0x0a,0x6a,0x64,0xb2,0xc9,0x15,0xc6,0x0e,0x8b,0x86,0x4f,0x20,0x8d,
			0x00,0x03,0x0a,0x6a,0x8b,0xd2,0x78,0x3f,0x7a,0xf8,0x92,0x8f,0x80,0x20,0x8d,
			0x00,0x03,0x0a,0x6a,0x9e,0xf9,0x07,0x73,0xd8,0xe8,0x24,0x93,0xcc,0x20,0x8d,
			0x00,0x03,0x0a,0x6a,0xcb,0x6c,0x41,0x52,0x61,0x20,0x4e,0x77,0x39,0x20,0x8d,
			0x00,0x03,0x0a,0x6a,0xf0,0x96,0x3c,0x4c,0x78,0x33,0xd0,0xf0,0x00,0x20,0x8d,
			0x00,0x03,0x0a,0x6b,0x59,0x5f,0xe7,0xdd,0x57,0xba,0xc1,0x12,0x51,0x20,0x8d,
			0x00,0x03,0x0a,0x6c,0x62,0x5b,0x0d,0x91,0x66,0xd0,0xca,0x10,0x2d,0x20,0x8d,
			0x00,0x03,0x0a,0x6c,0x62,0xc5,0x19,0x94,0x5b,0xcd,0x20,0xd9,0x73,0x20,0x8d,
			0x00,0x03,0x0a,0x6d,0xb8,0x7f,0xac,0x82,0x55,0x27,0xf2,0x01,0xf5,0x20,0x8d,
			0x00,0x03,0x0a,0x6d,0x95,0x8d,0xd8,0x7b,0x41,0xdc,0x81,0xd4,0x3d,0x20,0x8d,
			0x00,0x03,0x0a,0x6e,0x38,0xa5,0x11,0x8c,0x64,0x2b,0xc5,0xbe,0x6c,0x20,0x8d,
			0x00,0x03,0x0a,0x76,0xbb,0x65,0x0a,0xdf,0x23,0xa2,0x6d,0x4d,0xc8,0x20,0x8d,
			0x00,0x03,0x0a,0x76,0x8d,0x46,0x54,0x2a,0xb7,0x9e,0xce,0x74,0x45,0x20,0x8d,
			0x00,0x03,0x0a,0x77,0x30,0x99,0x1c,0x76,0x58,0x64,0x7c,0x2e,0x16,0x20,0x8d,
			0x00,0x03,0x0a,0x71,0x6f,0xc8,0x1a,0xde,0x5b,0xde,0xda,0xcc,0xd5,0x20,0x8d,
			0x00,0x03,0x0a,0x72,0x89,0x34,0x3d,0x7c,0x33,0x47,0x01,0x02,0x92,0x20,0x8d,
			0x00,0x03,0x0a,0x74,0x3b,0x0e,0x42,0x30,0x42,0x63,0xa5,0x3e,0x8d,0x20,0x8d,
			0x00,0x03,0x0a,0x74,0x2d,0xb6,0x15,0xc8,0x70,0x60,0x25,0x2e,0xe7,0x20,0x8d,
			0x00,0x03,0x0a,0x74,0x65,0x8d,0x57,0xdb,0x20,0xa2,0xc1,0xa7,0xbd,0x20,0x8d,
			0x00,0x03,0x0a,0x74,0xf9,0x3c,0xb3,0x2d,0xc2,0x18,0xc5,0xcb,0x2a,0x20,0x8d,
			0x00,0x03,0x0a,0x75,0x95,0xe1,0x69,0x25,0x99,0xec,0xac,0x00,0xe4,0x20,0x8d,
			0x00,0x03,0x0a,0x76,0x3f,0x29,0x6c,0xec,0xd3,0x95,0x7e,0x4e,0x8d,0x20,0x8d,
			0x00,0x03,0x0a,0x7e,0x9e,0x2f,0x58,0x20,0x23,0xea,0x34,0x78,0x44,0x20,0x8d,
			0x00,0x03,0x0a,0x7e,0xaf,0xae,0x18,0x67,0x04,0x98,0x61,0x2f,0xa9,0x20,0x8d,
			0x00,0x03,0x0a,0x7f,0x84,0xea,0x51,0x31,0xd3,0x46,0x75,0xae,0xbb,0x20,0x8d,
			0x00,0x03,0x0a,0x78,0x3e,0x3b,0x74,0x2b,0x6f,0x57,0x06,0x53,0xbb,0x20,0x8d,
			0x00,0x03,0x0a,0x78,0x24,0xc1,0x1e,0x6e,0x73,0x93,0xa5,0x08,0xe3,0x20,0x8d,
			0x00,0x03,0x0a,0x78,0xc0,0xf5,0x28,0xea,0xf3,0xc2,0x2c,0x6a,0x69,0x20,0x8d,
			0x00,0x03,0x0a,0x79,0x0f,0xd0,0x25,0xd4,0xa5,0xbc,0xcb,0x72,0x51,0x20,0x8d,
			0x00,0x03,0x0a,0x7a,0xa9,0x41,0x75,0xf6,0x5f,0x6f,0x83,0x58,0xf1,0x20,0x8d,
			0x00,0x03,0x0a,0x7c,0x39,0x64,0xaf,0xf5,0x37,0xe7,0x22,0xe0,0x42,0x20,0x8d,
			0x00,0x03,0x0a,0x7c,0xc3,0x68,0x1e,0x92,0x7c,0xbb,0x04,0x12,0x0b,0x20,0x8d,
			0x00,0x03,0x0a,0x7c,0xec,0xf0,0xdb,0x09,0xea,0xdb,0x82,0x5b,0x45,0x20,0x8d,
			0x00,0x03,0x0a,0x7d,0x3f,0x6d,0xa4,0xb8,0x8e,0x5f,0xf9,0x5e,0x48,0x20,0x8d,
			0x00,0x03,0x0a,0x7d,0xb0,0xb0,0xe2,0xa5,0xa0,0xbd,0xa3,0x9e,0xb7,0x20,0x8d,
			0x00,0x03,0x0a,0x86,0x8a,0x76,0xb7,0x13,0xe8,0x74,0x0c,0x54,0x44,0x20,0x8d,
			0x00,0x03,0x0a,0x86,0xd1,0xb0,0x3e,0x88,0x73,0x42,0x0c,0xb0,0xa4,0x20,0x8d,
			0x00,0x03,0x0a,0x80,0xfc,0x51,0x3e,0x9b,0x7d,0x42,0x5d,0x63,0x77,0x20,0x8d,
			0x00,0x03,0x0a,0x81,0x49,0x6a,0xef,0x1f,0x06,0xdf,0xc4,0x6c,0x23,0x20,0x8d,
			0x00,0x03,0x0a,0x81,0xf1,0x31,0xce,0x65,0x59,0xc2,0x2e,0x46,0x47,0x20,0x8d,
			0x00,0x03,0x0a,0x82,0x9b,0xbe,0xc4,0x3b,0xbe,0x8d,0x70,0xda,0x1c,0x20,0x8d,
			0x00,0x03,0x0a,0x82,0xea,0xb2,0x5e,0x5f,0x7d,0x80,0x2d,0x17,0x81,0x20,0x8d,
			0x00,0x03,0x0a,0x83,0x8c,0x28,0x22,0x33,0xa4,0xc1,0xe8,0xae,0xe6,0x20,0x8d,
			0x00,0x03,0x0a,0x84,0x73,0x02,0xdd,0x47,0x8b,0x29,0xda,0xf6,0x2e,0x20,0x8d,
			0x00,0x03,0x0a,0x84,0xb0,0x90,0x4a,0x1c,0xf0,0x75,0x2c,0x23,0x12,0x20,0x8d,
			0x00,0x03,0x0a,0x85,0x29,0xc0,0xeb,0x29,0x0b,0x63,0xaa,0x13,0x98,0x20,0x8d,
			0x00,0x03,0x0a,0x85,0x30,0x22,0xa7,0x56,0x23,0x73,0xe0,0x97,0x03,0x20,0x8d,
			0x00,0x03,0x0a,0x85,0x47,0x8d,0x89,0x8e,0x13,0x57,0x5e,0xd7,0xe2,0x20,0x8d,
			0x00,0x03,0x0a,0x85,0x6c,0x77,0xc3,0x06,0x03,0x75,0x75,0x63,0xa7,0x20,0x8d,
			0x00,0x03,0x0a,0x86,0x29,0x3b,0x0b,0x5e,0xa2,0xd7,0x44,0x80,0xa1,0x20,0x8d,
			0x00,0x03,0x0a,0x8f,0x3b,0x03,0x68,0x7e,0x45,0x8a,0x33,0xc2,0xcb,0x20,0x8d,
			0x00,0x03,0x0a,0x8f,0x2f,0x41,0xc7,0xd4,0xe4,0x7a,0xdc,0x18,0x1c,0x20,0x8d,
			0x00,0x03,0x0a,0x8f,0x80,0xf0,0x76,0x52,0xa2,0x6e,0x1b,0x0f,0x7c,0x20,0x8d,
			0x00,0x03,0x0a,0x8f,0xb3,0xa3,0x0a,0x54,0xdf,0xd5,0xb3,0x00,0x07,0x20,0x8d,
			0x00,0x03,0x0a,0x88,0x62,0x93,0x14,0x42,0x07,0xab,0xd0,0xff,0x0e,0x20,0x8d,
			0x00,0x03,0x0a,0x88,0x90,0x5b,0xa0,0x20,0xb4,0x27,0xe8,0xdf,0x39,0x20,0x8d,
			0x00,0x03,0x0a,0x88,0xdd,0xbb,0x8a,0x6a,0xde,0x55,0x94,0xd5,0x6d,0x20,0x8d,
			0x00,0x03,0x0a,0x88,0xea,0xb2,0x3f,0x1e,0x31,0xcc,0xf0,0x3f,0x2e,0x20,0x8d,
			0x00,0x03,0x0a,0x89,0x05,0x2d,0x83,0x5f,0x11,0xeb,0xa5,0x9b,0xdd,0x20,0x8d,
			0x00,0x03,0x0a,0x89,0x58,0x14,0x63,0xb5,0xcc,0xea,0xdf,0x1f,0x0d,0x20,0x8d,
			0x00,0x03,0x0a,0x8a,0xd1,0xd5,0x85,0x24,0xe2,0xbf,0xf4,0x37,0x36,0x20,0x8d,
			0x00,0x03,0x0a,0x8b,0xa1,0x66,0xb0,0x8f,0x12,0x79,0xdd,0xd4,0xa7,0x20,0x8d,
			0x00,0x03,0x0a,0x8b,0xc2,0xdb,0xf7,0x90,0x6a,0x11,0x58,0xb0,0xfb,0x20,0x8d,
			0x00,0x03,0x0a,0x8c,0xab,0x57,0x1a,0x03,0x5a,0x12,0xff,0xfc,0xf5,0x20,0x8d,
			0x00,0x03,0x0a,0x8d,0x99,0xd1,0xf0,0xe6,0xd9,0xc5,0xff,0xa8,0x73,0x20,0x8d,
			0x00,0x03,0x0a,0x96,0xf0,0x45,0xaa,0xa2,0xe9,0x7b,0x72,0x62,0x56,0x20,0x8d,
			0x00,0x03,0x0a,0x97,0xa3,0x7e,0xe8,0xe8,0x9b,0x1e,0xfe,0x2c,0xc4,0x20,0x8d,
			0x00,0x03,0x0a,0x90,0x3c,0xcd,0xc6,0xb8,0x12,0x1e,0x62,0x31,0x58,0x20,0x8d,
			0x00,0x03,0x0a,0x90,0x2a,0x40,0x90,0x92,0x62,0x91,0x56,0x14,0x2e,0x20,0x8d,
			0x00,0x03,0x0a,0x90,0x70,0x98,0xf5,0xaf,0x56,0x98,0xb6,0x16,0xdf,0x20,0x8d,
			0x00,0x03,0x0a,0x91,0x23,0x64,0xf3,0x49,0x61,0x3b,0x73,0x9d,0x96,0x20,0x8d,
			0x00,0x03,0x0a,0x91,0xb9,0x56,0x50,0x35,0xd8,0xd3,0x1c,0xd6,0x87,0x20,0x8d,
			0x00,0x03,0x0a,0x91,0xe4,0x65,0x49,0x74,0xcf,0x92,0xa3,0x3f,0xc6,0x20,0x8d,
			0x00,0x03,0x0a,0x92,0x71,0x96,0x5a,0xd4,0xf0,0xd0,0x84,0x4f,0x71,0x20,0x8d,
			0x00,0x03,0x0a,0x92,0xb6,0x46,0xee,0x24,0xa0,0xcd,0xb9,0x0c,0xdd,0x20,0x8d,
			0x00,0x03,0x0a,0x92,0x9c,0x82,0xbf,0x8e,0x4f,0xd7,0xc7,0x4a,0x9d,0x20,0x8d,
			0x00,0x03,0x0a,0x92,0xc9,0xa1,0x01,0xeb,0x52,0xdb,0xbd,0x93,0xf8,0x20,0x8d,
			0x00,0x03,0x0a,0x93,0x06,0x3f,0xc3,0xe6,0x73,0x40,0x91,0xb1,0x30,0x20,0x8d,
			0x00,0x03,0x0a,0x93,0xd8,0x7a,0x5d,0x21,0xd0,0x87,0xf5,0x92,0x8d,0x20,0x8d,
			0x00,0x03,0x0a,0x94,0x54,0x6c,0x57,0xa4,0x1b,0x74,0xf0,0x7d,0x0b,0x20,0x8d,
			0x00,0x03,0x0a,0x94,0x96,0xd4,0xa4,0xed,0x65,0x96,0xbc,0x4a,0xbc,0x20,0x8d,
			0x00,0x03,0x0a,0x95,0x3d,0xec,0x1a,0x20,0x97,0xa2,0xa1,0xcd,0xab,0x20,0x8d,
			0x00,0x03,0x0a,0x95,0x1a,0x3a,0xb0,0x29,0x8c,0xcc,0x32,0x80,0xf7,0x20,0x8d,
			0x00,0x03,0x0a,0x95,0x47,0xee,0xab,0xa9,0x78,0x17,0xa7,0xed,0x73,0x20,0x8d,
			0x00,0x03,0x0a,0x95,0x68,0x0e,0x9d,0x10,0x5d,0x2d,0xf7,0x6a,0x56,0x20,0x8d,
			0x00,0x03,0x0a,0x95,0xe0,0x9a,0x05,0x94,0x67,0x22,0xc2,0x99,0xf4,0x20,0x8d,
			0x00,0x03,0x0a,0x9e,0xb9,0xda,0xa3,0xfc,0xd4,0xd1,0xb9,0xb5,0x40,0x20,0x8d,
			0x00,0x03,0x0a,0x9f,0x0a,0x17,0x56,0xa6,0xcb,0xda,0x86,0x0f,0x4f,0x20,0x8d,
			0x00,0x03,0x0a,0x9f,0x17,0xcb,0x57,0x64,0x8a,0x8e,0xf1,0x93,0x4f,0x20,0x8d,
			0x00,0x03,0x0a,0x9f,0x60,0x23,0xd8,0x31,0xf5,0x3b,0x5d,0x00,0xca,0x20,0x8d,
			0x00,0x03,0x0a,0x9f,0xd2,0xb0,0x27,0xc6,0x36,0x2f,0xf9,0x76,0xb8,0x20,0x8d,
			0x00,0x03,0x0a,0x98,0x3d,0x24,0x92,0x18,0x0e,0xbe,0x5e,0x37,0x80,0x20,0x8d,
			0x00,0x03,0x0a,0x98,0x2b,0xfa,0x4d,0xf6,0xe3,0xcb,0x8f,0xa7,0xca,0x20,0x8d,
			0x00,0x03,0x0a,0x98,0x2e,0x6e,0xe7,0x52,0xb9,0x59,0xd1,0x70,0x7e,0x20,0x8d,
			0x00,0x03,0x0a,0x99,0x15,0x6a,0xb4,0x2e,0x18,0x73,0x15,0xd0,0xb2,0x20,0x8d,
			0x00,0x03,0x0a,0x99,0xb9,0x4b,0x45,0x2c,0x9c,0x74,0x95,0x85,0x38,0x20,0x8d,
			0x00,0x03,0x0a,0x99,0xf8,0x24,0xd4,0xa5,0x4c,0xed,0xea,0xb9,0x94,0x20,0x8d,
			0x00,0x03,0x0a,0x99,0xfc,0x5b,0xe1,0x93,0xb3,0x4a,0x82,0xc0,0x94,0x20,0x8d,
			0x00,0x03,0x0a,0x99,0xe6,0x23,0x9d,0x7a,0xed,0x35,0xe6,0x99,0x70,0x20,0x8d,
			0x00,0x03,0x0a,0x9a,0x10,0x03,0xfc,0x52,0xa3,0x94,0xb1,0x55,0x1e,0x20,0x8d,
			0x00,0x03,0x0a,0x9a,0xbd,0xbb,0xf4,0xaa,0xde,0xf7,0xfc,0xee,0x83,0x20,0x8d,
			0x00,0x03,0x0a,0x9a,0x8c,0xe7,0x4c,0x13,0xf0,0xa0,0xdf,0xd7,0x18,0x20,0x8d,
			0x00,0x03,0x0a,0x9b,0x53,0xdf,0x76,0xd6,0x86,0x7b,0x67,0xa6,0xb2,0x20,0x8d,
			0x00,0x03,0x0a,0x9c,0xbd,0x0b,0xef,0xec,0x63,0xe9,0xe6,0xa7,0xb8,0x20,0x8d,
			0x00,0x03,0x0a,0x9c,0xd2,0x89,0x56,0xf8,0x19,0x83,0x37,0xf7,0xc5,0x20,0x8d,
			0x00,0x03,0x0a,0x9d,0x9b,0xde,0x57,0xf1,0x06,0xae,0x93,0x0f,0xbd,0x20,0x8d,
			0x00,0x03,0x0a,0x9d,0xc8,0xce,0xb0,0x94,0x36,0xb8,0x6d,0x13,0x23,0x20,0x8d,
			0x00,0x03,0x0a,0x9e,0x11,0x46,0xb7,0x7e,0x5b,0x0a,0x28,0x75,0x71,0x20,0x8d,
			0x00,0x03,0x0a,0x9e,0x2b,0xdf,0x5e,0x5e,0x37,0x9a,0x3c,0xc2,0x97,0x20,0x8d,
			0x00,0x03,0x0a,0xa7,0x3e,0x5d,0x9e,0xf6,0x87,0xbb,0x23,0x4b,0x8e,0x20,0x8d,
			0x00,0x03,0x0a,0xa7,0x23,0xf2,0xb4,0xee,0x5c,0x47,0x6b,0x2d,0xa8,0x20,0x8d,
			0x00,0x03,0x0a,0xa7,0x7b,0xe7,0x14,0x3b,0x66,0x01,0x10,0x16,0xcd,0x20,0x8d,
			0x00,0x03,0x0a,0xa7,0x61,0xb3,0x07,0x3c,0x83,0xf3,0xcb,0x55,0x71,0x20,0x8d,
			0x00,0x03,0x0a,0xa0,0x14,0xbc,0x6f,0x03,0x89,0x2b,0x57,0xde,0xc8,0x20,0x8d,
			0x00,0x03,0x0a,0xa1,0xbc,0x70,0x3d,0x1c,0x84,0xc8,0xac,0x8b,0xf5,0x20,0x8d,
			0x00,0x03,0x0a,0xa2,0x3b,0xdd,0xc1,0xd3,0x1f,0xa2,0xe6,0xee,0x25,0x20,0x8d,
			0x00,0x03,0x0a,0xa2,0x23,0xf2,0xee,0xcb,0x9b,0x94,0x0f,0x04,0x21,0x20,0x8d,
			0x00,0x03,0x0a,0xa2,0xa2,0x94,0x9e,0xce,0x1a,0xf9,0xcb,0x31,0xc5,0x20,0x8d,
			0x00,0x03,0x0a,0xa2,0xfa,0x66,0x69,0x17,0xc7,0xd5,0x01,0x96,0xc6,0x20,0x8d,
			0x00,0x03,0x0a,0xa3,0x46,0x3f,0xc6,0x49,0xe3,0xc8,0xdd,0xd9,0xdc,0x20,0x8d,
			0x00,0x03,0x0a,0xa3,0xa3,0x67,0xe4,0xa4,0x3c,0xf0,0xa8,0x9b,0x9b,0x20,0x8d,
			0x00,0x03,0x0a,0xa3,0xab,0x27,0xeb,0x0b,0x9b,0x40,0xe4,0xc3,0xcb,0x20,0x8d,
			0x00,0x03,0x0a,0xa4,0x81,0x96,0x0c,0x52,0xde,0x9b,0x8d,0x70,0x78,0x20,0x8d,
			0x00,0x03,0x0a,0xa4,0x81,0x99,0x7c,0xcb,0x67,0xcc,0x4c,0x5d,0x4b,0x20,0x8d,
			0x00,0x03,0x0a,0xa4,0xa5,0xa5,0x10,0x66,0xfc,0x15,0x63,0x0e,0x3d,0x20,0x8d,
			0x00,0x03,0x0a,0xa4,0xcd,0x88,0xd6,0xdf,0xed,0xab,0xa6,0xe1,0x88,0x20,0x8d,
			0x00,0x03,0x0a,0xa6,0x6c,0x01,0x32,0x5f,0x56,0x32,0x72,0x1c,0x2b,0x20,0x8d,
			0x00,0x03,0x0a,0xae,0x94,0x31,0x12,0x75,0x92,0xd8,0x32,0x8a,0xd1,0x20,0x8d,
			0x00,0x03,0x0a,0xaf,0x56,0x76,0xe7,0x35,0xf3,0x5a,0x62,0x9b,0xa3,0x20,0x8d,
			0x00,0x03,0x0a,0xa8,0xb9,0xc3,0x07,0x95,0x23,0xde,0xe0,0xc6,0x7b,0x20,0x8d,
			0x00,0x03,0x0a,0xa9,0x6d,0x83,0xa6,0x9c,0xdd,0xae,0x7c,0xd6,0x97,0x20,0x8d,
			0x00,0x03,0x0a,0xa9,0xa8,0x9a,0x15,0x5d,0xda,0xe1,0x87,0x2d,0x0e,0x20,0x8d,
			0x00,0x03,0x0a,0xa9,0xc8,0x44,0xc2,0x1a,0xaf,0x46,0xa0,0xf2,0xf1,0x20,0x8d,
			0x00,0x03,0x0a,0xaa,0x7d,0xc2,0x0c,0x95,0xe2,0x5b,0x02,0x8e,0x41,0x20,0x8d,
			0x00,0x03,0x0a,0xab,0x00,0x8e,0xd1,0x06,0x26,0x63,0xa5,0x1d,0x49,0x20,0x8d,
			0x00,0x03,0x0a,0xab,0x29,0x85,0x0f,0xf2,0xb8,0x58,0x8f,0xdb,0xbf,0x20,0x8d,
			0x00,0x03,0x0a,0xab,0x98,0x40,0x0a,0x73,0x43,0x6f,0xb6,0x3d,0x8b,0x20,0x8d,
			0x00,0x03,0x0a,0xab,0xdd,0x6d,0x5d,0xc5,0x36,0xcb,0x6c,0xc8,0x70,0x20,0x8d,
			0x00,0x03,0x0a,0xac,0x81,0x65,0xa3,0x8b,0xea,0x0b,0x71,0xe4,0x16,0x20,0x8d,
			0x00,0x03,0x0a,0xad,0x1b,0x40,0xc1,0x45,0x64,0xbf,0x24,0x15,0xca,0x20,0x8d,
			0x00,0x03,0x0a,0xad,0x1c,0xc0,0xb4,0x95,0xb5,0x17,0xc0,0xc2,0x41,0x20,0x8d,
			0x00,0x03,0x0a,0xad,0xc4,0xfa,0x8d,0xa6,0xf7,0x40,0x42,0xe7,0xd3,0x20,0x8d,
			0x00,0x03,0x0a,0xae,0x2e,0xe4,0x64,0x79,0x05,0x5f,0xb7,0x04,0x14,0x20,0x8d,
			0x00,0x03,0x0a,0xb0,0x48,0xe6,0xe8,0x48,0xfa,0xca,0x87,0x78,0x18,0x20,0x8d,
			0x00,0x03,0x0a,0xb0,0x6c,0x4a,0x92,0xde,0xd3,0x0d,0x28,0xc4,0x79,0x20,0x8d,
			0x00,0x03,0x0a,0xb1,0x41,0x81,0xac,0xde,0xce,0x0b,0x94,0x8a,0x9d,0x20,0x8d,
			0x00,0x03,0x0a,0xb1,0x73,0xdf,0x4b,0xab,0xc3,0x7a,0x3c,0x48,0x99,0x20,0x8d,
			0x00,0x03,0x0a,0xb1,0xb6,0xc8,0x72,0x86,0xc6,0x34,0x6b,0xef,0x41,0x20,0x8d,
			0x00,0x03,0x0a,0xb1,0xd5,0x8e,0xf0,0x22,0x9a,0x8b,0xa6,0xf1,0xfb,0x20,0x8d,
			0x00,0x03,0x0a,0xb1,0xd8,0x90,0x36,0x0e,0xc6,0x51,0x9c,0x8b,0x93,0x20,0x8d,
			0x00,0x03,0x0a,0xb2,0xce,0xea,0x6a,0xd7,0x34,0x30,0x8d,0xdf,0x65,0x20,0x8d,
			0x00,0x03,0x0a,0xb2,0xea,0xa2,0xc5,0xeb,0x2a,0x10,0xec,0xeb,0x4e,0x20,0x8d,
			0x00,0x03,0x0a,0xbe,0xda,0x60,0xee,0xa0,0xf8,0xdd,0x5a,0x11,0xb6,0x20,0x8d,
			0x00,0x03,0x0a,0xbf,0x7f,0x7f,0x68,0x2c,0x63,0x70,0xba,0xbb,0xf1,0x20,0x8d,
			0x00,0x03,0x0a,0xb9,0xaa,0xce,0xfd,0x87,0x35,0x7b,0xee,0x0d,0x40,0x20,0x8d,
			0x00,0x03,0x0a,0xb9,0xe5,0xb3,0x2c,0xb6,0x6d,0x91,0x46,0x22,0xad,0x20,0x8d,
			0x00,0x03,0x0a,0xba,0x49,0xd2,0xda,0xb8,0x28,0xe8,0x4d,0x53,0xca,0x20,0x8d,
			0x00,0x03,0x0a,0xba,0xcd,0x40,0x9b,0x0b,0xc6,0x82,0xba,0xc8,0xdd,0x20,0x8d,
			0x00,0x03,0x0a,0xbb,0x57,0x4d,0xce,0xa0,0x53,0x4d,0x8f,0xcd,0x4f,0x20,0x8d,
			0x00,0x03,0x0a,0xbb,0xba,0xc0,0x45,0x0b,0x3d,0x30,0xef,0x86,0x93,0x20,0x8d,
			0x00,0x03,0x0a,0xbc,0x80,0x0b,0xa0,0xe3,0xc1,0x9b,0x6b,0xc5,0x17,0x20,0x8d,
			0x00,0x03,0x0a,0xbd,0x3a,0xc5,0xd0,0xc3,0x93,0x32,0x55,0x57,0x27,0x20,0x8d,
			0x00,0x03,0x0a,0xbd,0x63,0x78,0x09,0xf3,0x85,0x50,0x42,0x0c,0x3a,0x20,0x8d,
			0x00,0x03,0x0a,0xbd,0xb2,0x78,0xc7,0x06,0x2c,0xe1,0xb8,0x72,0xdc,0x20,0x8d,
			0x00,0x03,0x0a,0xc7,0x25,0x66,0x48,0x17,0x18,0x9d,0x2d,0x05,0xb4,0x20,0x8d,
			0x00,0x03,0x0a,0xc7,0x66,0xbe,0x2e,0x08,0xdf,0xba,0xf7,0xae,0x83,0x20,0x8d,
			0x00,0x03,0x0a,0xc7,0x6d,0x92,0x43,0x00,0x24,0xe5,0xd6,0x83,0xd3,0x20,0x8d,
			0x00,0x03,0x0a,0xc7,0xf7,0x05,0x69,0x99,0x52,0x54,0x77,0x2b,0x1f,0x20,0x8d,
			0x00,0x03,0x0a,0xc7,0xdd,0x9d,0xe0,0x6d,0xaa,0x03,0xcb,0x9c,0x21,0x20,0x8d,
			0x00,0x03,0x0a,0xc0,0x0f,0xf8,0x18,0xb0,0x84,0x66,0x47,0x08,0xe4,0x20,0x8d,
			0x00,0x03,0x0a,0xc0,0x41,0xc0,0xc5,0x9d,0xef,0x46,0x46,0xae,0x7f,0x20,0x8d,
			0x00,0x03,0x0a,0xc1,0x89,0x05,0x1b,0x88,0x6b,0xd7,0x20,0x08,0x9b,0x20,0x8d,
			0x00,0x03,0x0a,0xc2,0x4e,0xd2,0xd3,0xfd,0x58,0x32,0x14,0x6f,0x87,0x20,0x8d,
			0x00,0x03,0x0a,0xc2,0x6d,0xf5,0x40,0x0f,0xbd,0xfb,0x53,0x19,0xc9,0x20,0x8d,
			0x00,0x03,0x0a,0xc3,0x3e,0x86,0xb1,0xd5,0x0c,0x5a,0x0e,0x18,0x4e,0x20,0x8d,
			0x00,0x03,0x0a,0xc4,0x3a,0x2a,0x49,0xb4,0x72,0xa4,0x2c,0x7b,0x99,0x20,0x8d,
			0x00,0x03,0x0a,0xc4,0x44,0x04,0x3a,0x11,0x84,0x47,0x67,0x2a,0x13,0x20,0x8d,
			0x00,0x03,0x0a,0xc4,0x45,0x1f,0xbc,0xc9,0xa0,0x32,0x01,0xeb,0xbc,0x20,0x8d,
			0x00,0x03,0x0a,0xc4,0x55,0x2a,0xb9,0xbb,0x9b,0x2a,0xe7,0x1c,0x75,0x20,0x8d,
			0x00,0x03,0x0a,0xc4,0xdf,0x49,0x72,0xb7,0xed,0xbe,0x9f,0x59,0xfa,0x20,0x8d,
			0x00,0x03,0x0a,0xc4,0xe0,0x24,0x19,0x5a,0x39,0xc6,0xbe,0x74,0xee,0x20,0x8d,
			0x00,0x03,0x0a,0xc5,0xdc,0x95,0xee,0xec,0x4d,0x25,0xb1,0xa1,0x5a,0x20,0x8d,
			0x00,0x03,0x0a,0xc6,0x47,0x01,0xca,0x17,0xe1,0x47,0x46,0x9b,0xd6,0x20,0x8d,
			0x00,0x03,0x0a,0xce,0xf6,0xda,0x2a,0x7f,0x69,0x90,0xad,0x89,0xe4,0x20,0x8d,
			0x00,0x03,0x0a,0xce,0xf1,0x60,0x80,0x76,0xe7,0x9a,0x36,0xdc,0xc7,0x20,0x8d,
			0x00,0x03,0x0a,0xcf,0x98,0x18,0x43,0xeb,0x5d,0xd7,0x16,0xf1,0x50,0x20,0x8d,
			0x00,0x03,0x0a,0xc8,0x76,0xb8,0x89,0x52,0x6f,0x23,0x93,0xe5,0x24,0x20,0x8d,
			0x00,0x03,0x0a,0xc9,0x3e,0xe1,0xbf,0xef,0xc8,0x22,0x97,0xae,0x51,0x20,0x8d,
			0x00,0x03,0x0a,0xc9,0x82,0xc3,0xcc,0x29,0x07,0x0b,0x8d,0x6f,0xfb,0x20,0x8d,
			0x00,0x03,0x0a,0xc9,0xfe,0x7a,0x81,0x62,0x35,0x52,0xf7,0x02,0x0c,0x20,0x8d,
			0x00,0x03,0x0a,0xca,0x33,0x3a,0xdc,0x87,0x62,0x7a,0xc2,0x1d,0xe6,0x20,0x8d,
			0x00,0x03,0x0a,0xca,0x50,0x8d,0xe0,0x82,0x1c,0x59,0x0f,0xef,0x1b,0x20,0x8d,
			0x00,0x03,0x0a,0xca,0xa3,0x66,0x19,0x34,0xac,0xb2,0x0f,0x60,0x9a,0x20,0x8d,
			0x00,0x03,0x0a,0xcb,0xb3,0xa0,0x39,0xf6,0x46,0xec,0x5a,0x42,0xc6,0x20,0x8d,
			0x00,0x03,0x0a,0xcc,0xc6,0x22,0xb4,0xfc,0xf7,0xff,0xb0,0xa2,0xb4,0x20,0x8d,
			0x00,0x03,0x0a,0xcd,0x2e,0x71,0x78,0x7b,0x6d,0x9e,0x61,0x70,0x05,0x20,0x8d,
			0x00,0x03,0x0a,0xcd,0x31,0x38,0x94,0x95,0xca,0x44,0xf4,0x65,0x68,0x20,0x8d,
			0x00,0x03,0x0a,0xcd,0x61,0xe1,0xbe,0x7b,0x46,0x9c,0x51,0xbf,0x66,0x20,0x8d,
			0x00,0x03,0x0a,0xcd,0xac,0xcf,0x18,0x1f,0xa6,0x8f,0x02,0x6a,0x43,0x20,0x8d,
			0x00,0x03,0x0a,0xce,0x20,0x1e,0x2c,0x8d,0x2c,0x9e,0xd9,0xa7,0xac,0x20,0x8d,
			0x00,0x04,0x20,0xd1,0xbb,0x02,0x8d,0x4d,0xd5,0x6a,0x20,0xc0,0xf9,0x16,0x2b,0x84,0x22,0x66,0xe0,0x89,0x45,0x60,0x37,0x52,0xe2,0x0b,0xa5,0xb4,0xf8,0x26,0xb3,0x8f,0x5a,0x30,0xed,0x20,0x8d,
			0x00,0x04,0x20,0xd2,0x59,0x3b,0xd7,0x14,0x7e,0xd0,0x98,0xfe,0x9e,0xa5,0x69,0xf4,0x26,0x6d,0x72,0x6f,0xc3,0x76,0xce,0x1d,0x40,0x41,0xa2,0xa1,0xaf,0xf9,0x6e,0x57,0x2d,0x9d,0xc3,0x20,0x8d,
			0x00,0x04,0x20,0xdf,0xd9,0xed,0x59,0xbf,0x1e,0x77,0x48,0x3c,0x13,0x3b,0xc5,0xc8,0x15,0x86,0x88,0x68,0xf0,0x08,0xe9,0xee,0x9b,0x3d,0xa4,0x33,0x0a,0x68,0x67,0x86,0x9d,0xe2,0x83,0x20,0x8d,
			0x00,0x04,0x20,0xe9,0xbf,0xa7,0xbd,0x9b,0x54,0x54,0xe8,0xc8,0xae,0x78,0x99,0xa0,0xa3,0xf6,0x5d,0x78,0xe3,0x9e,0x5c,0xa7,0x18,0xb9,0x13,0x0c,0x04,0x9b,0xf3,0x7f,0x27,0x18,0xb0,0x20,0x8d,
			0x00,0x04,0x20,0xf8,0x8d,0x64,0xd2,0xc8,0xe9,0x0f,0x51,0x03,0x1c,0x98,0x33,0x8f,0xe0,0x1e,0xe7,0xb6,0x16,0x8d,0x2a,0xf5,0xf3,0x19,0xce,0xdd,0x9e,0xee,0x17,0xc3,0x8f,0xd6,0xa1,0x20,0x8d,
			0x00,0x04,0x20,0xfb,0xf1,0x17,0xd6,0x03,0x3b,0x01,0x8b,0x98,0xcf,0x16,0x20,0xde,0xaf,0x6c,0xed,0x60,0xab,0x6e,0x14,0x0b,0x58,0x6b,0x2d,0xf8,0x06,0x98,0x37,0x7a,0xff,0x7a,0x0f,0x20,0x8d,
			0x00,0x04,0x20,0x0f,0xb9,0x71,0x05,0x64,0x83,0x2c,0x68,0x6a,0x9c,0xf0,0x4f,0xc3,0x90,0xcd,0x5c,0x73,0x9a,0xdd,0xb3,0xc6,0x42,0xca,0x09,0xbb,0xcc,0xfe,0x29,0x49,0x9f,0xc7,0x28,0x20,0x8d,
			0x00,0x04,0x20,0x22,0x6e,0x42,0xe4,0xbd,0x2b,0xe5,0x3e,0x30,0xda,0x8a,0x03,0xf3,0x45,0x52,0xac,0x84,0xbf,0xbf,0xc5,0xaa,0x5f,0xe0,0x1b,0x26,0x28,0xb5,0x83,0x2e,0xed,0x4c,0xee,0x20,0x8d,
			0x00,0x04,0x20,0x2a,0x47,0x8b,0xa0,0x4f,0x67,0x1d,0xcd,0x5d,0x84,0x1a,0xec,0xbd,0xd2,0xaa,0xe9,0x99,0x01,0x96,0x5d,0x4e,0xff,0x64,0x47,0xba,0xde,0xbf,0x56,0x89,0x39,0xac,0xde,0x20,0x8d,
			0x00,0x04,0x20,0x2b,0xf3,0xe8,0xf5,0xef,0x90,0x14,0xab,0x61,0xe9,0x11,0x97,0x9f,0x18,0x4d,0xb4,0xff,0x89,0x94,0xf7,0x92,0x94,0x53,0xe6,0x9e,0xd4,0xdb,0x85,0x89,0x4d,0x3e,0xc9,0x20,0x8d,
			0x00,0x04,0x20,0x2e,0x4e,0xde,0x51,0xd7,0x28,0x4b,0x29,0x7c,0xff,0x1f,0x8a,0x50,0xb7,0x5e,0xf0,0x81,0xcd,0xe8,0x8a,0x08,0x73,0x58,0x4e,0x43,0x1f,0x7b,0x85,0x9a,0xed,0xe2,0x68,0x20,0x8d,
			0x00,0x04,0x20,0x35,0xdd,0xd0,0x36,0xa5,0x69,0x4a,0xd2,0xcc,0xb8,0xe9,0x62,0xa3,0x55,0xeb,0x86,0xe2,0xf3,0x03,0x48,0x26,0xe6,0x20,0xad,0xda,0xaa,0xff,0xde,0x16,0xad,0x39,0x9d,0x20,0x8d,
			0x00,0x04,0x20,0x41,0x47,0x4e,0xc2,0xa1,0x71,0x63,0x3e,0x11,0x54,0x46,0x91,0x80,0xed,0x41,0x16,0x32,0x29,0x19,0x60,0xc9,0xef,0xa3,0xb7,0x96,0x2c,0x94,0xa8,0xdf,0x55,0xd7,0x21,0x20,0x8d,
			0x00,0x04,0x20,0x44,0xf3,0xb7,0x5e,0x48,0x3c,0xbd,0xa6,0x52,0xaa,0x68,0xb5,0xbf,0xdc,0x01,0x5f,0x4b,0xeb,0x7a,0x25,0xcb,0x4a,0x70,0xbc,0x18,0x8c,0x97,0x5d,0x27,0x54,0x09,0x17,0x20,0x8d,
			0x00,0x04,0x20,0x5c,0x52,0x7f,0x17,0x16,0x4c,0x27,0x36,0x2d,0x05,0xa1,0x19,0x0d,0xbe,0x87,0xab,0x24,0x7b,0xe7,0x38,0x3b,0xa1,0x7f,0xd1,0xd4,0x28,0x16,0x8e,0xfc,0x98,0x7d,0x08,0x20,0x8d,
			0x00,0x04,0x20,0x67,0xc4,0x17,0xa5,0xcb,0x77,0xbd,0xaa,0x11,0x7f,0x8b,0xc0,0x81,0xf3,0xc0,0x96,0x9d,0x31,0x27,0x9c,0xad,0x6c,0x6d,0x98,0x42,0x70,0xdb,0x50,0x12,0x96,0x0b,0x36,0x20,0x8d,
			0x00,0x04,0x20,0x73,0xdb,0x82,0xe0,0x88,0x40,0x49,0xd8,0x3b,0xa0,0xdd,0x83,0x7c,0x84,0x3c,0xb8,0xd0,0x03,0x0b,0x7a,0x08,0x44,0x4e,0x79,0xd6,0x61,0x23,0x31,0xa9,0xb3,0x07,0x58,0x20,0x8d,
			0x00,0x04,0x20,0x75,0x93,0x21,0xdd,0x99,0x58,0x3c,0x3f,0xae,0x36,0x50,0x58,0x49,0xe2,0xd0,0xc3,0x3a,0x2c,0x4a,0xcf,0x41,0xc4,0x82,0x48,0xab,0xec,0x07,0x5d,0x56,0x2c,0xb4,0x8d,0x20,0x8d,
			0x00,0x04,0x20,0x87,0xd4,0x66,0x0f,0xed,0xf9,0xf5,0xf1,0xcb,0x85,0x37,0xec,0xe1,0x19,0xa8,0xa4,0x03,0xb7,0x13,0x59,0xbb,0xf8,0xd2,0x93,0x92,0x50,0xfa,0x30,0x7a,0xd8,0x43,0xd0,0x20,0x8d,
			0x00,0x04,0x20,0x8b,0xfe,0xad,0x19,0xdb,0x97,0x57,0x84,0xec,0xad,0x4f,0xb2,0xdf,0x69,0x53,0x04,0x57,0x19,0x16,0x7a,0x71,0xd7,0x2b,0xab,0x03,0xfd,0x76,0x4d,0xa0,0x70,0xc3,0xe7,0x20,0x8d,
			0x00,0x04,0x20,0x96,0x25,0xde,0x4a,0xbc,0xbd,0x76,0x76,0xee,0x43,0x45,0x76,0xe0,0x0d,0x99,0x83,0xcd,0x83,0x8f,0x94,0xe5,0xde,0x7a,0xf2,0xf0,0x57,0xb8,0x25,0x54,0x17,0xcb,0x3b,0x20,0x8d,
			0x00,0x04,0x20,0x98,0xc6,0x44,0x27,0x90,0x41,0xa6,0x98,0xf9,0x25,0x6c,0x59,0x0f,0x06,0x6d,0x44,0x59,0x0e,0xb2,0x46,0xb0,0xa4,0x37,0x88,0x69,0x8f,0xc1,0x32,0xcd,0x9f,0x15,0xd7,0x20,0x8d,
			0x00,0x04,0x20,0xaa,0x3a,0x16,0x86,0xea,0x59,0x09,0x04,0x78,0xe5,0x10,0x92,0xe1,0x1d,0xad,0xf7,0x56,0x2b,0xac,0xb0,0x97,0x29,0x63,0x30,0xf4,0x1b,0xcf,0xde,0xf3,0x28,0x0a,0x29,0x20,0x8d,
			0x00,0x04,0x20,0xbc,0x27,0xae,0x89,0xc1,0x67,0x73,0x0a,0x08,0x02,0xdf,0xb7,0xcc,0x94,0xc7,0x9f,0xf4,0x72,0x7a,0x9b,0x20,0x0c,0x5c,0x11,0x3d,0x22,0xd6,0x13,0x88,0x66,0x74,0xbf,0x20,0x8d
		};

		static byte[] pnSeed6_test = new byte[] {
			0x00,0x03,0x0a,0x99,0xcb,0x26,0x31,0xba,0x48,0x51,0x31,0x39,0x0d,0x47,0x9d,
			0x00,0x03,0x0a,0x44,0xf4,0xf4,0xf0,0xbf,0xf7,0x7e,0x6d,0xc4,0xe8,0x47,0x9d,
			0x00,0x03,0x0a,0x6a,0x8b,0xd2,0x78,0x3f,0x7a,0xf8,0x92,0x8f,0x80,0x47,0x9d,
			0x00,0x03,0x0a,0xe6,0x4e,0xa4,0x47,0x4e,0x2a,0xfe,0xe8,0x95,0xcc,0x47,0x9d,
			0x00,0x03,0x0a,0x9f,0xae,0x9f,0x59,0x0b,0x3f,0x31,0x3a,0x8a,0x5f,0x47,0x9d,
			0x00,0x03,0x0a,0x47,0xb1,0xe4,0x55,0xd1,0xb0,0x14,0x3f,0xb6,0xdb,0x47,0x9d,
			0x00,0x03,0x0a,0xa0,0x60,0x9e,0x46,0x54,0xdb,0x61,0x3b,0xb2,0x6f,0x47,0x9d,
		};


		readonly uint magic;

#if !NOSOCKET
		List<DNSSeedData> vSeeds = new List<DNSSeedData>();
		List<NetworkAddress> vFixedSeeds = new List<NetworkAddress>();
#else
		List<string> vSeeds = new List<string>();
		List<string> vFixedSeeds = new List<string>();
#endif
		readonly byte[] _GenesisBytes;

		private int nRPCPort;
		public int RPCPort
		{
			get
			{
				return nRPCPort;
			}
		}

		private int nDefaultPort;
		public int DefaultPort
		{
			get
			{
				return nDefaultPort;
			}
		}


		private Consensus consensus = new Consensus();
		public Consensus Consensus
		{
			get
			{
				return consensus;
			}
		}

		private Network(string name, byte[] genesis, uint magic, string? uriScheme, INetworkSet networkSet)
		{
			if (name == null)
				throw new ArgumentNullException(nameof(name));
			if (genesis == null)
				throw new ArgumentNullException(nameof(genesis));
			if (networkSet == null)
				throw new ArgumentNullException(nameof(networkSet));
			this.UriScheme = uriScheme ?? "bitcoin";
			this._GenesisBytes = genesis;
			this.magic = magic;
			this._NetworkSet = networkSet;
			this._MagicBytes = new byte[]
			{
				(byte)Magic,
				(byte)(Magic >> 8),
				(byte)(Magic >> 16),
				(byte)(Magic >> 24)
			};
			this.name = name;
		}

		private readonly string name;

		public string Name
		{
			get
			{
				return name;
			}
		}

		private ChainName? chainName;

		public ChainName ChainName
		{
			get
			{
				if (chainName is null)
					throw new InvalidOperationException("Network.ChainName is not set");
				return chainName;
			}
		}

		static Network()
		{
			_Main = new Network("Main",
				Encoders.Hex.DecodeData("0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a29ab5f49ffff001d1dac2b7c0101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000"),
				0xD9B4BEF9,
				null,
				NBitcoin.Bitcoin.Instance);
			_Main.InitMain();
			_Main.Consensus.Freeze();

			_TestNet = new Network("TestNet",
				Encoders.Hex.DecodeData("0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4adae5494dffff001d1aa4ae180101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000"),
				0x0709110B,
				null,
				NBitcoin.Bitcoin.Instance);
			_TestNet.InitTest();
			_TestNet.Consensus.Freeze();

			_RegTest = new Network("RegTest",
				Encoders.Hex.DecodeData("0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4adae5494dffff7f20020000000101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000"),
				0xDAB5BFFA,
				null,
				NBitcoin.Bitcoin.Instance);
			_RegTest.InitReg();
			_RegTest.Consensus.Freeze();
			Bitcoin.Instance.InitSignet();
		}

		static Network _Main;
		public static Network Main
		{
			get
			{
				return _Main;
			}
		}

		static Network _TestNet;
		public static Network TestNet
		{
			get
			{
				return _TestNet;
			}
		}

		static Network _RegTest;
		public static Network RegTest
		{
			get
			{
				return _RegTest;
			}
		}

		static Dictionary<string, Network> _OtherAliases = new Dictionary<string, Network>();
		static List<Network> _OtherNetworks = new List<Network>();


		private readonly INetworkSet _NetworkSet;
		public INetworkSet NetworkSet
		{
			get
			{
				return _NetworkSet;
			}
		}
#if !NOFILEIO
		/// <summary>
		/// Returns the default data directory of bitcoin correctly accross OS
		/// </summary>
		/// <param name="folderName">The name of the folder</param>
		/// <returns>The full path to the data directory of Bitcoin</returns>
		public static string? GetDefaultDataFolder(string folderName)
		{
			var home = Environment.GetEnvironmentVariable("HOME");
			var localAppData = Environment.GetEnvironmentVariable("APPDATA");
			if (string.IsNullOrEmpty(home) && string.IsNullOrEmpty(localAppData))
				return null;
			if (!string.IsNullOrEmpty(home) && string.IsNullOrEmpty(localAppData))
				return Path.Combine(home, "." + folderName.ToLowerInvariant());
			else if (!string.IsNullOrEmpty(localAppData))
				return Path.Combine(localAppData, char.ToUpperInvariant(folderName[0]) + folderName.Substring(1));
			return null;
		}
#endif

		internal static Network Register(NetworkBuilder builder)
		{
			if (builder._Name == null)
				throw new InvalidOperationException("A network name need to be provided");
			if (GetNetwork(builder._Name) != null)
				throw new InvalidOperationException("The network " + builder._Name + " is already registered");
			Network network = new Network(builder._Name, builder._Genesis.ToArray(), builder._Magic, builder._UriScheme, builder._NetworkSet);
			network.chainName = builder._ChainName;
			network.consensus = builder._Consensus;
			network.nDefaultPort = builder._Port;
			network.nRPCPort = builder._RPCPort;
			network.NetworkStringParser = builder._NetworkStringParser;
			network.MaxP2PVersion = builder._MaxP2PVersion == null ? BITCOIN_MAX_P2P_VERSION : builder._MaxP2PVersion.Value;

#if !NOSOCKET
			foreach (var seed in builder.vSeeds)
			{
				network.vSeeds.Add(seed);
			}
			foreach (var seed in builder.vFixedSeeds)
			{
				network.vFixedSeeds.Add(seed);
			}
#endif
			network.base58Prefixes = Network.Main.base58Prefixes.ToArray();
			foreach (var kv in builder._Base58Prefixes)
			{
				network.base58Prefixes[(int)kv.Key] = kv.Value;
			}
			var bech32Encoders = Network.Main.bech32Encoders.ToList();
			foreach (var kv in builder._Bech32Prefixes)
			{
				var index = (int)kv.Key;
				if (index < bech32Encoders.Count)
				{
					bech32Encoders[index] = kv.Value;
				}
				else
				{
					bech32Encoders.Add(kv.Value);
				}
			}
			network.bech32Encoders = bech32Encoders.ToArray();
			lock (_OtherAliases)
			{
				foreach (var alias in builder._Aliases)
				{
					_OtherAliases.Add(alias.ToLowerInvariant(), network);
				}
				_OtherAliases.Add(network.name.ToLowerInvariant(), network);
				var defaultAlias = network._NetworkSet.CryptoCode.ToLowerInvariant() + "-" + network.ChainName.ToString().ToLowerInvariant();
				if (!_OtherAliases.ContainsKey(defaultAlias))
					_OtherAliases.Add(defaultAlias, network);
			}
			lock (_OtherNetworks)
			{
				_OtherNetworks.Add(network);
			}

			network.consensus.SetBlock(builder._Genesis);
			network.consensus.Freeze();
			return network;
		}


		const uint BITCOIN_MAX_P2P_VERSION = 70016;
		private void InitMain()
		{
			chainName = ChainName.Mainnet;
			MaxP2PVersion = BITCOIN_MAX_P2P_VERSION;
			consensus.CoinbaseMaturity = 100;
			consensus.SubsidyHalvingInterval = 210000;
			consensus.MajorityEnforceBlockUpgrade = 750;
			consensus.MajorityRejectBlockOutdated = 950;
			consensus.MajorityWindow = 1000;
			consensus.BuriedDeployments[BuriedDeployments.BIP34] = 227931;
			consensus.BuriedDeployments[BuriedDeployments.BIP65] = 388381;
			consensus.BuriedDeployments[BuriedDeployments.BIP66] = 363725;
			consensus.BIP34Hash = new uint256("0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8");
			consensus.PowLimit = new Target(new uint256("00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
			consensus.MinimumChainWork = new uint256("0x0000000000000000000000000000000000000000002cb971dd56d1c583c20f90");
			consensus.PowTargetTimespan = TimeSpan.FromSeconds(14 * 24 * 60 * 60); // two weeks
			consensus.PowTargetSpacing = TimeSpan.FromSeconds(10 * 60);
			consensus.PowAllowMinDifficultyBlocks = false;
			consensus.PowNoRetargeting = false;
			consensus.RuleChangeActivationThreshold = 1916; // 95% of 2016
			consensus.MinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing
			consensus.SupportTaproot = true;
			consensus.SupportSegwit = true;

			consensus.BIP9Deployments[BIP9Deployments.TestDummy] = new BIP9DeploymentsParameters(28, 1199145601, 1230767999);
			consensus.BIP9Deployments[BIP9Deployments.CSV] = new BIP9DeploymentsParameters(0, 1462060800, 1493596800);
			consensus.BIP9Deployments[BIP9Deployments.Segwit] = new BIP9DeploymentsParameters(1, 1479168000, 1510704000);

			consensus.CoinType = 0;

			// The message start string is designed to be unlikely to occur in normal data.
			// The characters are rarely used upper ASCII, not valid as UTF-8, and produce
			// a large 4-byte int at any alignment.
			nDefaultPort = 8333;
			nRPCPort = 8332;
			consensus.SetBlock(_GenesisBytes);
			assert(consensus.HashGenesisBlock == uint256.Parse("0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f"));
#if !NOSOCKET
			vSeeds.Add(new DNSSeedData("bitcoin.sipa.be", "seed.bitcoin.sipa.be")); // Pieter Wuille
			vSeeds.Add(new DNSSeedData("bluematt.me", "dnsseed.bluematt.me")); // Matt Corallo
			vSeeds.Add(new DNSSeedData("dashjr.org", "dnsseed.bitcoin.dashjr.org")); // Luke Dashjr
			vSeeds.Add(new DNSSeedData("bitcoinstats.com", "seed.bitcoinstats.com")); // Christian Decker
			vSeeds.Add(new DNSSeedData("xf2.org", "bitseed.xf2.org")); // Jeff Garzik
			vSeeds.Add(new DNSSeedData("bitcoin.jonasschnelli.ch", "seed.bitcoin.jonasschnelli.ch")); // Jonas Schnelli
#endif
			base58Prefixes[(int)Base58Type.PUBKEY_ADDRESS] = new byte[] { (0) };
			base58Prefixes[(int)Base58Type.SCRIPT_ADDRESS] = new byte[] { (5) };
			base58Prefixes[(int)Base58Type.SECRET_KEY] = new byte[] { (128) };
			base58Prefixes[(int)Base58Type.ENCRYPTED_SECRET_KEY_NO_EC] = new byte[] { 0x01, 0x42 };
			base58Prefixes[(int)Base58Type.ENCRYPTED_SECRET_KEY_EC] = new byte[] { 0x01, 0x43 };
			base58Prefixes[(int)Base58Type.EXT_PUBLIC_KEY] = new byte[] { (0x04), (0x88), (0xB2), (0x1E) };
			base58Prefixes[(int)Base58Type.EXT_SECRET_KEY] = new byte[] { (0x04), (0x88), (0xAD), (0xE4) };
			base58Prefixes[(int)Base58Type.PASSPHRASE_CODE] = new byte[] { 0x2C, 0xE9, 0xB3, 0xE1, 0xFF, 0x39, 0xE2 };
			base58Prefixes[(int)Base58Type.CONFIRMATION_CODE] = new byte[] { 0x64, 0x3B, 0xF6, 0xA8, 0x9A };
			base58Prefixes[(int)Base58Type.ASSET_ID] = new byte[] { 23 };
			base58Prefixes[(int)Base58Type.COLORED_ADDRESS] = new byte[] { 0x13 };

			var encoder = new Bech32Encoder("bc");
			bech32Encoders[(int)Bech32Type.WITNESS_PUBKEY_ADDRESS] = encoder;
			bech32Encoders[(int)Bech32Type.WITNESS_SCRIPT_ADDRESS] = encoder;
			bech32Encoders[(int)Bech32Type.TAPROOT_ADDRESS] = encoder;

#if !NOSOCKET
			vFixedSeeds.AddRange(LoadNetworkAddresses(pnSeed6_main));
#endif
		}
		private void InitTest()
		{
			_TestNet.chainName = ChainName.Testnet;
			chainName = ChainName.Testnet;
			MaxP2PVersion = BITCOIN_MAX_P2P_VERSION;
			consensus.SubsidyHalvingInterval = 210000;
			consensus.MajorityEnforceBlockUpgrade = 51;
			consensus.MajorityRejectBlockOutdated = 75;
			consensus.MajorityWindow = 100;
			consensus.BuriedDeployments[BuriedDeployments.BIP34] = 21111;
			consensus.BuriedDeployments[BuriedDeployments.BIP65] = 581885;
			consensus.BuriedDeployments[BuriedDeployments.BIP66] = 330776;
			consensus.BIP34Hash = new uint256("0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8");
			consensus.PowLimit = new Target(new uint256("00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
			consensus.MinimumChainWork = new uint256("0x0000000000000000000000000000000000000000000000198b4def2baa9338d6");
			consensus.PowTargetTimespan = TimeSpan.FromSeconds(14 * 24 * 60 * 60); // two weeks
			consensus.PowTargetSpacing = TimeSpan.FromSeconds(10 * 60);
			consensus.PowAllowMinDifficultyBlocks = true;
			consensus.PowNoRetargeting = false;
			consensus.RuleChangeActivationThreshold = 1512; // 75% for testchains
			consensus.MinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing
			consensus.SupportTaproot = true;
			consensus.SupportSegwit = true;

			consensus.BIP9Deployments[BIP9Deployments.TestDummy] = new BIP9DeploymentsParameters(28, 1199145601, 1230767999);
			consensus.BIP9Deployments[BIP9Deployments.CSV] = new BIP9DeploymentsParameters(0, 1456790400, 1493596800);
			consensus.BIP9Deployments[BIP9Deployments.Segwit] = new BIP9DeploymentsParameters(1, 1462060800, 1493596800);

			consensus.CoinType = 1;

			nDefaultPort = 18333;
			nRPCPort = 18332;
			//strDataDir = "testnet3";

			// Modify the testnet genesis block so the timestamp is valid for a later start.
			consensus.SetBlock(_GenesisBytes);
			assert(consensus.HashGenesisBlock == uint256.Parse("0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943"));

#if !NOSOCKET
			vFixedSeeds.Clear();
			vSeeds.Clear();
			vSeeds.Add(new DNSSeedData("bitcoin.jonasschnelli.ch", "testnet-seed.bitcoin.jonasschnelli.ch"));
			vSeeds.Add(new DNSSeedData("tbtc.petertodd.org", "seed.tbtc.petertodd.org"));
			vSeeds.Add(new DNSSeedData("bitcoin.sprovoost.nl", "seed.testnet.bitcoin.sprovoost.nl"));
			vSeeds.Add(new DNSSeedData("bluematt.me", "testnet-seed.bluematt.me"));
#endif

			base58Prefixes = Network.Main.base58Prefixes.ToArray();
			base58Prefixes[(int)Base58Type.PUBKEY_ADDRESS] = new byte[] { (111) };
			base58Prefixes[(int)Base58Type.SCRIPT_ADDRESS] = new byte[] { (196) };
			base58Prefixes[(int)Base58Type.SECRET_KEY] = new byte[] { (239) };
			base58Prefixes[(int)Base58Type.EXT_PUBLIC_KEY] = new byte[] { (0x04), (0x35), (0x87), (0xCF) };
			base58Prefixes[(int)Base58Type.EXT_SECRET_KEY] = new byte[] { (0x04), (0x35), (0x83), (0x94) };
			base58Prefixes[(int)Base58Type.ASSET_ID] = new byte[] { 115 };
			base58Prefixes[(int)Base58Type.COLORED_ADDRESS] = new byte[] { 0x13 };

			var encoder = new Bech32Encoder("tb");
			bech32Encoders[(int)Bech32Type.WITNESS_PUBKEY_ADDRESS] = encoder;
			bech32Encoders[(int)Bech32Type.WITNESS_SCRIPT_ADDRESS] = encoder;
			bech32Encoders[(int)Bech32Type.TAPROOT_ADDRESS] = encoder;

#if !NOSOCKET
			vFixedSeeds.AddRange(LoadNetworkAddresses(pnSeed6_test));

#endif
		}
		private void InitReg()
		{
			chainName = ChainName.Regtest;
			MaxP2PVersion = BITCOIN_MAX_P2P_VERSION;
			consensus.SubsidyHalvingInterval = 150;
			consensus.MajorityEnforceBlockUpgrade = 750;
			consensus.MajorityRejectBlockOutdated = 950;
			consensus.MajorityWindow = 1000;
			consensus.BuriedDeployments[BuriedDeployments.BIP34] = 100000000;
			consensus.BuriedDeployments[BuriedDeployments.BIP65] = 100000000;
			consensus.BuriedDeployments[BuriedDeployments.BIP66] = 100000000;
			consensus.BIP34Hash = new uint256();
			consensus.PowLimit = new Target(new uint256("7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
			consensus.MinimumChainWork = uint256.Zero;
			consensus.PowTargetTimespan = TimeSpan.FromSeconds(14 * 24 * 60 * 60); // two weeks
			consensus.PowTargetSpacing = TimeSpan.FromSeconds(10 * 60);
			consensus.PowAllowMinDifficultyBlocks = true;
			consensus.PowNoRetargeting = true;
			consensus.RuleChangeActivationThreshold = 108;
			consensus.MinerConfirmationWindow = 144;
			consensus.SupportTaproot = true;
			consensus.SupportSegwit = true;

			consensus.BIP9Deployments[BIP9Deployments.TestDummy] = new BIP9DeploymentsParameters(28, 0, 999999999);
			consensus.BIP9Deployments[BIP9Deployments.CSV] = new BIP9DeploymentsParameters(0, 0, 999999999);
			consensus.BIP9Deployments[BIP9Deployments.Segwit] = new BIP9DeploymentsParameters(1, BIP9DeploymentsParameters.AlwaysActive, 999999999);

			consensus.SetBlock(_GenesisBytes);
			nDefaultPort = 18444;
			nRPCPort = 18443;
			//strDataDir = "regtest";
			assert(consensus.HashGenesisBlock == uint256.Parse("0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206"));

#if !NOSOCKET
			vSeeds.Clear();  // Regtest mode doesn't have any DNS seeds.
#endif
			base58Prefixes = Network.TestNet.base58Prefixes.ToArray();
			base58Prefixes[(int)Base58Type.PUBKEY_ADDRESS] = new byte[] { (111) };
			base58Prefixes[(int)Base58Type.SCRIPT_ADDRESS] = new byte[] { (196) };
			base58Prefixes[(int)Base58Type.SECRET_KEY] = new byte[] { (239) };
			base58Prefixes[(int)Base58Type.EXT_PUBLIC_KEY] = new byte[] { (0x04), (0x35), (0x87), (0xCF) };
			base58Prefixes[(int)Base58Type.EXT_SECRET_KEY] = new byte[] { (0x04), (0x35), (0x83), (0x94) };
			base58Prefixes[(int)Base58Type.COLORED_ADDRESS] = new byte[] { 0x13 };

			var encoder = new Bech32Encoder("bcrt");
			bech32Encoders[(int)Bech32Type.WITNESS_PUBKEY_ADDRESS] = encoder;
			bech32Encoders[(int)Bech32Type.WITNESS_SCRIPT_ADDRESS] = encoder;
			bech32Encoders[(int)Bech32Type.TAPROOT_ADDRESS] = encoder;
		}
#if !NOSOCKET
		private static IEnumerable<NetworkAddress> LoadNetworkAddresses(byte[] payload)
		{
			// Convert the pnSeeds array into usable address objects.
			Random rand = new Random();
			TimeSpan nOneWeek = TimeSpan.FromDays(7);

			var stream = new BitcoinStream(payload);
			stream.Type = SerializationType.Network;

			using (stream.ProtocolVersionScope(NetworkAddress.AddrV2Format))
			{
				stream.ProtocolCapabilities.SupportTimeAddress = false;
				while (true)
				{
					// It'll only connect to one or two seed nodes because once it connects,
					// it'll get a pile of addresses with newer timestamps.
					var addr = new NetworkAddress();
					try
					{
						addr.ReadWrite(stream);
						// weeks ago.
						addr.Time = DateTime.UtcNow - (TimeSpan.FromSeconds(rand.NextDouble() * nOneWeek.TotalSeconds)) - nOneWeek;
					}
					catch (EndOfStreamException)
					{
						break;
					}
					yield return addr;
				}
			}
		}
#endif
		private Block CreateGenesisBlock(uint nTime, uint nNonce, uint nBits, int nVersion, Money genesisReward)
		{
			string pszTimestamp = "The Times 03/Jan/2009 Chancellor on brink of second bailout for banks";
			Script genesisOutputScript = new Script(Op.GetPushOp(Encoders.Hex.DecodeData("04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f")), OpcodeType.OP_CHECKSIG);
			return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);
		}

		private Block CreateGenesisBlock(string pszTimestamp, Script genesisOutputScript, uint nTime, uint nNonce, uint nBits, int nVersion, Money genesisReward)
		{
			Transaction txNew = Consensus.ConsensusFactory.CreateTransaction();
			txNew.Version = 1;
			txNew.Inputs.Add(scriptSig: new Script(Op.GetPushOp(486604799), new Op()
			{
				Code = (OpcodeType)0x1,
				PushData = new[] { (byte)4 }
			}, Op.GetPushOp(Encoders.ASCII.DecodeData(pszTimestamp))));
			txNew.Outputs.Add(genesisReward, genesisOutputScript);
			Block genesis = Consensus.ConsensusFactory.CreateBlock();
			genesis.Header.BlockTime = Utils.UnixTimeToDateTime(nTime);
			genesis.Header.Bits = nBits;
			genesis.Header.Nonce = nNonce;
			genesis.Header.Version = nVersion;
			genesis.Transactions.Add(txNew);
			genesis.Header.HashPrevBlock = uint256.Zero;
			genesis.UpdateMerkleRoot();
			return genesis;
		}

		private static void assert(bool v)
		{
			if (!v)
				throw new InvalidOperationException("Invalid network");
		}

		public BitcoinSecret CreateBitcoinSecret(string base58)
		{
			return new BitcoinSecret(base58, this);
		}

		/// <summary>
		/// Create a bitcoin address from base58 data, return a BitcoinAddress or BitcoinScriptAddress
		/// </summary>
		/// <param name="base58">base58 address</param>
		/// <exception cref="System.FormatException">Invalid base58 address</exception>
		/// <returns>BitcoinScriptAddress, BitcoinAddress</returns>
		public BitcoinAddress CreateBitcoinAddress(string base58)
		{
			var type = GetBase58Type(base58);
			if (!type.HasValue)
				throw new FormatException("Invalid Base58 version");
			if (type == Base58Type.PUBKEY_ADDRESS)
				return new BitcoinPubKeyAddress(base58, this);
			if (type == Base58Type.SCRIPT_ADDRESS)
				return new BitcoinScriptAddress(base58, this);
			throw new FormatException("Invalid Base58 version");
		}

		public BitcoinScriptAddress CreateBitcoinScriptAddress(string base58)
		{
			return new BitcoinScriptAddress(base58, this);
		}

		private Base58Type? GetBase58Type(string base58)
		{
			return GetBase58Type(NetworkStringParser.GetBase58CheckEncoder().DecodeData(base58), out _);
		}
		private Base58Type? GetBase58Type(byte[] bytes, out int prefixLength)
		{
			for (int i = 0; i < base58Prefixes.Length; i++)
			{
				var prefix = base58Prefixes[i];
				if (prefix == null)
					continue;
				if (bytes.Length < prefix.Length)
					continue;
				if (Utils.ArrayEqual(bytes, 0, prefix, 0, prefix.Length))
				{
					prefixLength = prefix.Length;
					return (Base58Type)i;
				}
			}
			prefixLength = 0;
			return null;
		}


		internal static Network? GetNetworkFromBase58Data(string base58, Base58Type? expectedType = null)
		{
			foreach (var network in GetNetworks())
			{
				var type = network.GetBase58Type(base58);
				if (type.HasValue)
				{
					if (expectedType != null && expectedType.Value != type.Value)
						continue;
					if (type.Value == Base58Type.COLORED_ADDRESS)
					{
						var raw = network.NetworkStringParser.GetBase58CheckEncoder().DecodeData(base58);
						var version = network.GetVersionBytes(type.Value, false);
						if (version == null)
							continue;
						raw = raw.Skip(version.Length).ToArray();
						base58 = network.NetworkStringParser.GetBase58CheckEncoder().EncodeData(raw);
						return GetNetworkFromBase58Data(base58, null);
					}
					return network;
				}
			}
			return null;
		}

		public T Parse<T>(string str) where T : IBitcoinString
		{
			return (T)Parse(str, typeof(T));
		}
		public IBitcoinString Parse(string str)
		{
			return Parse(str, null);
		}
		public IBitcoinString Parse(string str, Type? targetType)
		{
			if (str == null)
				throw new ArgumentNullException(nameof(str));
			targetType ??= typeof(IBitcoinString);
			if (NetworkStringParser.TryParse(str, this, targetType, out var o))
				return o;
			var base58Encoder = NetworkStringParser.GetBase58CheckEncoder();

			var maybeb58 = base58Encoder.IsMaybeEncoded(str);
			if (maybeb58)
			{
				byte[]? decoded = null;
				try
				{
					decoded = base58Encoder.DecodeData(str);
				}
				catch (FormatException) { maybeb58 = false; }
				if (maybeb58)
				{
					var candidate = GetCandidate(str, decoded!);
					if (candidate != null && targetType.GetTypeInfo().IsAssignableFrom((candidate.GetType().GetTypeInfo())))
						return candidate;
					throw new FormatException("Invalid base58 string");
				}
			}

			int i = -1;
			foreach (var encoder in bech32Encoders)
			{
				i++;
				if (encoder == null)
					continue;
				var type = (Bech32Type)i;
				try
				{
					byte witVersion;
					var bytes = encoder.Decode(str, out witVersion);
					IBitcoinString? candidate = null;
					if (witVersion == 0 && bytes.Length == 20 && type == Bech32Type.WITNESS_PUBKEY_ADDRESS)
						candidate = new BitcoinWitPubKeyAddress(str.ToLowerInvariant(), bytes, this);
					if (witVersion == 0 && bytes.Length == 32 && type == Bech32Type.WITNESS_SCRIPT_ADDRESS)
						candidate = new BitcoinWitScriptAddress(str.ToLowerInvariant(), bytes, this);
					if (witVersion == 1 && bytes.Length == 32 && type == Bech32Type.TAPROOT_ADDRESS)
						candidate = new TaprootAddress(str.ToLowerInvariant(), bytes, this);
					if (candidate != null && targetType.GetTypeInfo().IsAssignableFrom((candidate.GetType().GetTypeInfo())))
						return candidate;
				}
				catch (Bech32FormatException) { throw; }
				catch (FormatException) { continue; }
			}
			throw new FormatException("Invalid string");
		}

		public static IBitcoinString Parse(string str, Network expectedNetwork, Type? targetType = null)
		{
			if (expectedNetwork == null)
				throw new ArgumentNullException(nameof(expectedNetwork));
			if (str == null)
				throw new ArgumentNullException(nameof(str));
			return expectedNetwork.Parse(str, targetType);
		}

		public static T Parse<T>(string str, Network expectedNetwork) where T : IBitcoinString
		{
			if (expectedNetwork == null)
				throw new ArgumentNullException(nameof(expectedNetwork));
			if (str == null)
				throw new ArgumentNullException(nameof(str));
			return expectedNetwork.Parse<T>(str);
		}

		private IBase58Data? GetCandidate(string base58, byte[] decoded)
		{
			if (base58 == null)
				throw new ArgumentNullException(nameof(base58));
			var maybeType = GetBase58Type(decoded, out var prefixLength);
			if (maybeType is Base58Type type)
			{
				if (type == Base58Type.COLORED_ADDRESS)
				{
					var wrapped = BitcoinColoredAddress.GetWrappedBase58(base58, this);
					var wrappedType = GetBase58Type(wrapped);
					if (wrappedType == null)
						return null;
					try
					{
						var inner = CreateBase58Data(wrappedType.Value, wrapped);
						if (inner.Network != this)
							return null;
					}
					catch (FormatException) { }
				}
				try
				{
					if (type is Base58Type.PUBKEY_ADDRESS && decoded.Length == 20 + prefixLength)
						return new BitcoinPubKeyAddress(new KeyId(decoded.Skip(prefixLength).ToArray()), this);
					if (type is Base58Type.SCRIPT_ADDRESS && decoded.Length == 20 + prefixLength)
						return new BitcoinScriptAddress(new ScriptId(decoded.Skip(prefixLength).ToArray()), this);
					return CreateBase58Data(type, base58);
				}
				catch (FormatException) { }
			}
			return null;
		}


		internal NetworkStringParser NetworkStringParser
		{
			get;
			set;
		} = new NetworkStringParser();

		public TransactionBuilder CreateTransactionBuilder()
		{
			var builder = this.Consensus.ConsensusFactory.CreateTransactionBuilderCore2(this);
			return builder;
		}

		public TransactionBuilder CreateTransactionBuilder(int seed)
		{
			var builder = this.Consensus.ConsensusFactory.CreateTransactionBuilderCore2(this);
			builder.ShuffleRandom = new Random(seed);
			return builder;
		}

		public Base58CheckEncoder GetBase58CheckEncoder()
		{
			return NetworkStringParser.GetBase58CheckEncoder();
		}

		private IBase58Data CreateBase58Data(Base58Type type, string base58)
		{
			if (type == Base58Type.EXT_PUBLIC_KEY)
				return CreateBitcoinExtPubKey(base58);
			if (type == Base58Type.EXT_SECRET_KEY)
				return CreateBitcoinExtKey(base58);
			if (type == Base58Type.PUBKEY_ADDRESS)
				return new BitcoinPubKeyAddress(base58, this);
			if (type == Base58Type.SCRIPT_ADDRESS)
				return CreateBitcoinScriptAddress(base58);
			if (type == Base58Type.SECRET_KEY)
				return CreateBitcoinSecret(base58);
			if (type == Base58Type.CONFIRMATION_CODE)
				return CreateConfirmationCode(base58);
			if (type == Base58Type.ENCRYPTED_SECRET_KEY_EC)
				return CreateEncryptedKeyEC(base58);
			if (type == Base58Type.ENCRYPTED_SECRET_KEY_NO_EC)
				return CreateEncryptedKeyNoEC(base58);
			if (type == Base58Type.PASSPHRASE_CODE)
				return CreatePassphraseCode(base58);
			if (type == Base58Type.ASSET_ID)
				return CreateAssetId(base58);
			if (type == Base58Type.COLORED_ADDRESS)
				return CreateColoredAddress(base58);
			throw new NotSupportedException("Invalid Base58Data type : " + type.ToString());
		}

		//private BitcoinWitScriptAddress CreateWitScriptAddress(string base58)
		//{
		//	return new BitcoinWitScriptAddress(base58, this);
		//}

		//private BitcoinWitPubKeyAddress CreateWitPubKeyAddress(string base58)
		//{
		//	return new BitcoinWitPubKeyAddress(base58, this);
		//}

		private BitcoinColoredAddress CreateColoredAddress(string base58)
		{
			return new BitcoinColoredAddress(base58, this);
		}

		public NBitcoin.OpenAsset.BitcoinAssetId CreateAssetId(string base58)
		{
			return new NBitcoin.OpenAsset.BitcoinAssetId(base58, this);
		}

		private BitcoinPassphraseCode CreatePassphraseCode(string base58)
		{
			return new BitcoinPassphraseCode(base58, this);
		}

		private BitcoinEncryptedSecretNoEC CreateEncryptedKeyNoEC(string base58)
		{
			return new BitcoinEncryptedSecretNoEC(base58, this);
		}

		private BitcoinEncryptedSecretEC CreateEncryptedKeyEC(string base58)
		{
			return new BitcoinEncryptedSecretEC(base58, this);
		}

		private Base58Data CreateConfirmationCode(string base58)
		{
			return new BitcoinConfirmationCode(base58, this);
		}

		private Base58Data CreateBitcoinExtPubKey(string base58)
		{
			return new BitcoinExtPubKey(base58, this);
		}


		public BitcoinExtKey CreateBitcoinExtKey(ExtKey key)
		{
			return new BitcoinExtKey(key, this);
		}

		public BitcoinExtPubKey CreateBitcoinExtPubKey(ExtPubKey pubkey)
		{
			return new BitcoinExtPubKey(pubkey, this);
		}

		public BitcoinExtKey CreateBitcoinExtKey(string base58)
		{
			return new BitcoinExtKey(base58, this);
		}

		public override string ToString()
		{
			return name;
		}

		public Block GetGenesis()
		{
			var block = Consensus.ConsensusFactory.CreateBlock();
			block.ReadWrite(_GenesisBytes, Consensus.ConsensusFactory);
			return block;
		}


		public uint256 GenesisHash
		{
			get
			{
				return consensus.HashGenesisBlock;
			}
		}

		public static IEnumerable<Network> GetNetworks()
		{
			yield return Main;
			yield return TestNet;
			yield return RegTest;

			if (_OtherNetworks.Count != 0)
			{
				List<Network> others = new List<Network>();
				lock (_OtherNetworks)
				{
					others = _OtherNetworks.ToList();
				}
				foreach (var network in others)
				{
					yield return network;
				}
			}
		}

		/// <summary>
		/// Get network from name
		/// </summary>
		/// <param name="name">main,mainnet,testnet,test,testnet3,reg,regtest,sig,signet</param>
		/// <returns>The network or null of the name does not match any network</returns>
		public static Network? GetNetwork(string name)
		{
			if (name == null)
				throw new ArgumentNullException(nameof(name));
			name = name.ToLowerInvariant();
			switch (name)
			{
				case "main":
				case "btc-mainnet":
				case "mainnet":
					return Network.Main;
				case "testnet":
				case "btc-testnet":
				case "test":
				case "testnet3":
					return Network.TestNet;
				case "reg":
				case "btc-regtest":
				case "regtest":
				case "regnet":
					return Network.RegTest;
			}

			if (_OtherAliases.Count != 0)
			{
				return _OtherAliases.TryGet(name);
			}
			return null;
		}

		public BitcoinSecret CreateBitcoinSecret(Key key)
		{
			return new BitcoinSecret(key, this);
		}
		public BitcoinPubKeyAddress CreateBitcoinAddress(KeyId dest)
		{
			if (dest == null)
				throw new ArgumentNullException(nameof(dest));
			return NetworkStringParser.CreateP2PKH(dest, this);
		}

		private BitcoinScriptAddress CreateBitcoinScriptAddress(ScriptId scriptId)
		{
			return NetworkStringParser.CreateP2SH(scriptId, this);
		}

		public Message ParseMessage(byte[] bytes, uint? version = null)
		{
			BitcoinStream bstream = new BitcoinStream(bytes);
			bstream.ConsensusFactory = this.Consensus.ConsensusFactory;
			Message message = new Message();
			using (bstream.ProtocolVersionScope(version))
			{
				message.ReadWrite(bstream);
			}
			if (message.Magic != magic)
				throw new FormatException("Unexpected magic field in the message");
			return message;
		}

#if !NOSOCKET
		public IEnumerable<NetworkAddress> SeedNodes
		{
			get
			{
				return this.vFixedSeeds;
			}
		}
		public IEnumerable<DNSSeedData> DNSSeeds
		{
			get
			{
				return this.vSeeds;
			}
		}
#endif
		readonly byte[] _MagicBytes;
		public byte[] MagicBytes
		{
			get
			{
				return _MagicBytes;
			}
		}
		public uint Magic
		{
			get
			{
				return magic;
			}
		}

		public Money GetReward(int nHeight)
		{
			long nSubsidy = new Money(50 * Money.COIN);
			int halvings = nHeight / consensus.SubsidyHalvingInterval;

			// Force block reward to zero when right shift is undefined.
			if (halvings >= 64)
				return Money.Zero;

			// Subsidy is cut in half every 210,000 blocks which will occur approximately every 4 years.
			nSubsidy >>= halvings;

			return new Money(nSubsidy);
		}

		public bool ReadMagic(Stream stream, CancellationToken cancellation, bool throwIfEOF = false)
		{
			byte[] bytes = new byte[1];
			for (int i = 0; i < MagicBytes.Length; i++)
			{
				i = Math.Max(0, i);
				cancellation.ThrowIfCancellationRequested();

				var read = stream.ReadEx(bytes, 0, bytes.Length, cancellation);
				if (read == 0)
					if (throwIfEOF)
						throw new EndOfStreamException("No more bytes to read");
					else
						return false;
				if (read != 1)
					i--;
				else if (_MagicBytes[i] != bytes[0])
					i = _MagicBytes[0] == bytes[0] ? 0 : -1;
			}
			return true;
		}
	}
}
#nullable disable
